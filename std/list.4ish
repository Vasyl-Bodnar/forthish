"std/util" useup

: dotimes ( q i -> ! )
  : I take ;
  : F take open ;
  : inn
    I 0 >
      [ F I 1 - : I take ; inn ]
      [ ]
    if ;
  inn ;

: .. ( i i -> qi )
  : I take 1 - ;
  [] +quote [ dup hd succ swap +quote ] I dotimes ;

: repeat ( a i -> qa )
  : I take ;
  : A take ;
  [] [ A swap +quote ] I dotimes ;

: fold ( qa qb :qb a -> qb; -> qb )
  : F take open ;
  : inn
    swap dup [] <>
      [ swap over shd F swap stl swap inn ]
      [ pop ]
    if ;
  inn ;

: reduce ( qa :qa a -> qa; -> qa )
  : F take open ;
  : inn
    swap dup [] <>
      [ swap over shd F swap stl swap inn ]
      [ pop ]
    if ;
  dup shd swap stl swap inn ;

: rfold ( qa qb :qb a -> qb; -> qb )
  : F take open ;
  : inn
    swap dup [] <>
      [ swap over hd F swap tl swap inn ]
      [ pop ]
    if ;
  inn ;

: rreduce ( qa :qa a -> qa; -> qa )
  : F take open ;
  : inn
    swap dup [] <>
      [ swap over hd F swap tl swap inn ]
      [ pop ]
    if ;
  dup hd swap tl swap inn ;

( Non List [hd & tl] Versions )
( : non-list-fold qa qb :qb a -> qb; -> qb ! )
(   : F take open ; )
(   : TL take ; )
(   len 1 - )
(   : QLEN take ; )
(   : inn )
(     len QLEN - 0 > )
(       [ TL swap F : TL take ; inn ] )
(       [ TL ] )
(     if ; )
(   open inn ; )

( : non-list-reduce qa :qa a -> qa; -> qa ! )
(   : F take open ; )
(   len 1 - )
(   : QLEN take ; )
(   : inn )
(     len QLEN - 0 > )
(       [ TL swap F : TL take ; inn ] )
(       [ TL ] )
(     if ; )
(   open : TL take ; inn ;! )

( TODO: Efficient "Short-Circuiting" versions would be preferable, if the current design permits )
: mem ( qa a -> ? )
  [ = [ pop true ] [] if ] +quote false swap rfold ;

: any ( qa :a -> ?; -> ?)
  [ [ pop true ] [] if ] + false swap rfold ;

: all ( qa :a -> ?; -> ?)
  [ [] [ pop false ] if ] + true swap rfold ;

: filter (qa :a -> ?; -> qa)
  [ dup ] swap + [ [ swap +quote ] [ pop ] if ] + [] swap fold ;

: rfilter (qa :a -> ?; -> qa)
  [ dup ] swap + [ [ swap +quote ] [ pop ] if ] + [] swap rfold ;

: count (q -> i)
  0 [ pop 1 + ] rfold ;

: rev ( qa -> qa )
  [] [ swap +quote ] rfold ;

: map ( qa :a -> b; -> qb )
  [ swap +quote ] + [] swap fold ;

: rmap ( qa :a -> b; -> qb )
  [ swap +quote ] + [] swap rfold ;

: iter ( qa :a -> u; -> u )
  [] swap fold ;

: sum ( qi -> i )
  [ + ] rreduce ;

: prod ( qi -> i )
  [ * ] rreduce ;

: max ( =qa -> a )
  [ dup2 > [ pop ] [ swap pop ] if ] rreduce ;

: min ( =qa -> a )
  [ dup2 < [ pop ] [ swap pop ] if ] rreduce ;

: match ( [ a [?] ] -> a )
  [ ] [ open open [ swap +quote ] [ pop [] + ] if ] fold ;

: matchw ( a [ b :a -> ?; ] -> b )
  swap : A take ; [ ] [ open A swap open [ swap +quote ] [ pop [] + ] if ] fold ;

: digits (i -> q)
  : TL [] ;
  : inn
    dup 0 >
      [ dup 10 % TL +quote : TL take ; 10 / inn ]
      [ pop TL ]
    if ;
  dup 10 % TL +quote : TL take ; 10 / inn ;

: int->str (i -> s)
  digits
  [[ ["0" [0 = ]]
     ["1" [1 = ]]
     ["2" [2 = ]]
     ["3" [3 = ]]
     ["4" [4 = ]]
     ["5" [5 = ]]
     ["6" [6 = ]]
     ["7" [7 = ]]
     ["8" [8 = ]]
     ["9" [9 = ]]
   ] matchw open
  ] map concat ;

: str->int (s -> i)
  chars
  [[ [0 ["0" = ]]
     [1 ["1" = ]]
     [2 ["2" = ]]
     [3 ["3" = ]]
     [4 ["4" = ]]
     [5 ["5" = ]]
     [6 ["6" = ]]
     [7 ["7" = ]]
     [8 ["8" = ]]
     [9 ["9" = ]]
   ] matchw open
  ] rmap 0 [ 10 * swap 10 * + ] fold 10 / ;
