// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.4.0
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return t == 245 ? 1 : 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_div(x, y){
    if(y == 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_ml_bytes_length(s){return s.l;}
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   var caml_callback = caml_call_gen;
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   var caml_ml_channels = new Array();
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.file.length();
   }
   function caml_ml_debug_info_status(){return 0;}
   function caml_ml_flush(chanid){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channels[chanid],
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channels[chanid];
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channels[chanid], p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max == chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] != 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   var caml_sys_fds = new Array(3);
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    var buffer = caml_uint8_array_of_bytes(buffer);
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_pos_in(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid);}
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channels[chanid];
    chan.name = name;
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_build_symbols(toc){
    var symb;
    while(toc)
     if(caml_jsstring_of_string(toc[1][1]) == "SYJS"){symb = toc[1][2]; break;}
     else
      toc = toc[2];
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.toc){
      if(! caml_global_data.symbols)
       caml_global_data.symbols = caml_build_symbols(caml_global_data.toc);
      var nid = caml_global_data.symbols[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg + "\n");
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   var
    cst$0 = "",
    cst$3 = " ",
    cst_expected_a_Non_Empty_Quote = " expected a Non-Empty Quote Argument",
    cst_expected_another_Argument_ =
      " expected another Argument, but none are on the Stack",
    cst_expected_either_Ints_or_St = " expected either Ints or Strings",
    cst_Li = "%Li",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_u = "%u",
    cst_characters = ", characters ",
    cst = ".",
    cst_4ish = ".4ish",
    cst$4 = ":",
    cst$2 = "@[",
    cst$1 = "@{",
    cst_Assert_failure = "Assert_failure",
    cst_Bad_function_definition = "Bad function definition",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Function = "Function ",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_concat = "concat",
    cst_false = "false",
    cst_hd = "hd",
    cst_take = "take",
    cst_tl = "tl",
    cst_true = "true",
    cst_web_main_ml = "web/main.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    mode = [0, 0, [0, 7, 0]],
    opt = [0, 103],
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    std_lib =
      '\n: id ; ( -> )\n\n: quote+ quote + ;\n\n: succ 1 + ;\n\n: pred 1 - ;\n\n: rott rot rot ; ( a b c -> c a b )\n\n: dup2 over over ; ( a b -> a b a b )\n\n: <= dup2 = rrot < or ; ( =a a -> a )\n\n: int->bool 0 > ; ( i -> ? )\n\n: bool->int [1] [0] if ; ( ? -> i )\n\n: dotimes ( q i -> ! )\n  : I take ;\n  : F take open ;\n  : inn\n    I 0 >\n      [ F I 1 - : I take ; inn ]\n      [ ]\n    if ;\n  inn ;\n\n: .. ( i i -> qi )\n  : I take 1 - ;\n  [] +quote [ dup hd succ swap +quote ] I dotimes ;\n\n: repeat ( a i -> qa )\n  : I take ;\n  : A take ;\n  [] [ A swap +quote ] I dotimes ;\n\n: fold ( qa qb :qb a -> qb; -> qb )\n  : F take open ;\n  : inn\n    swap dup [] <>\n      [ swap over shd F swap stl swap inn ]\n      [ pop ]\n    if ;\n  inn ;\n\n: reduce ( qa :qa a -> qa; -> qa )\n  : F take open ;\n  : inn\n    swap dup [] <>\n      [ swap over shd F swap stl swap inn ]\n      [ pop ]\n    if ;\n  dup shd swap stl swap inn ;\n\n: rfold ( qa qb :qb a -> qb; -> qb )\n  : F take open ;\n  : inn\n    swap dup [] <>\n      [ swap over hd F swap tl swap inn ]\n      [ pop ]\n    if ;\n  inn ;\n\n: rreduce ( qa :qa a -> qa; -> qa )\n  : F take open ;\n  : inn\n    swap dup [] <>\n      [ swap over hd F swap tl swap inn ]\n      [ pop ]\n    if ;\n  dup hd swap tl swap inn ;\n: mem ( qa a -> ? )\n  [ = [ pop true ] [] if ] +quote false swap rfold ;\n\n: any ( qa :a -> ?; -> ?)\n  [ [ pop true ] [] if ] + false swap rfold ;\n\n: all ( qa :a -> ?; -> ?)\n  [ [] [ pop false ] if ] + true swap rfold ;\n\n: filter (qa :a -> ?; -> qa)\n  [ dup ] swap + [ [ swap +quote ] [ pop ] if ] + [] swap fold ;\n\n: rfilter (qa :a -> ?; -> qa)\n  [ dup ] swap + [ [ swap +quote ] [ pop ] if ] + [] swap rfold ;\n\n: count (q -> i)\n  0 [ pop 1 + ] rfold ;\n\n: rev ( qa -> qa )\n  [] [ swap +quote ] rfold ;\n\n: map ( qa :a -> b; -> qb )\n  [ swap +quote ] + [] swap fold ;\n\n: rmap ( qa :a -> b; -> qb )\n  [ swap +quote ] + [] swap rfold ;\n\n: iter ( qa :a -> u; -> u )\n  [] swap fold ;\n\n: sum ( qi -> i )\n  [ + ] rreduce ;\n\n: prod ( qi -> i )\n  [ * ] rreduce ;\n\n: max ( =qa -> a )\n  [ dup2 > [ pop ] [ swap pop ] if ] rreduce ;\n\n: min ( =qa -> a )\n  [ dup2 < [ pop ] [ swap pop ] if ] rreduce ;\n\n: match ( [ a [?] ] -> a )\n  [ ] [ open open [ swap +quote ] [ pop [] + ] if ] fold ;\n\n: matchw ( a [ b :a -> ?; ] -> b )\n  swap : A take ; [ ] [ open A swap open [ swap +quote ] [ pop [] + ] if ] fold ;\n\n: digits (i -> q)\n  : TL [] ;\n  : inn\n    dup 0 >\n      [ dup 10 % TL +quote : TL take ; 10 / inn ]\n      [ pop TL ]\n    if ;\n  dup 10 % TL +quote : TL take ; 10 / inn ;\n\n: int->str (i -> s)\n  digits\n  [[ ["0" [0 = ]]\n     ["1" [1 = ]]\n     ["2" [2 = ]]\n     ["3" [3 = ]]\n     ["4" [4 = ]]\n     ["5" [5 = ]]\n     ["6" [6 = ]]\n     ["7" [7 = ]]\n     ["8" [8 = ]]\n     ["9" [9 = ]]\n   ] matchw open\n  ] map concat ;\n\n: str->int (s -> i)\n  chars\n  [[ [0 ["0" = ]]\n     [1 ["1" = ]]\n     [2 ["2" = ]]\n     [3 ["3" = ]]\n     [4 ["4" = ]]\n     [5 ["5" = ]]\n     [6 ["6" = ]]\n     [7 ["7" = ]]\n     [8 ["8" = ]]\n     [9 ["9" = ]]\n   ] matchw open\n  ] rmap 0 [ 10 * swap 10 * + ] fold 10 / ;\n';
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _e_ = "input",
    _d_ = cst,
    _b_ = cst_true,
    _c_ = cst_false,
    _a_ = "Stdlib.Exit",
    _g_ = "Seq.drop",
    _f_ = "Seq.take",
    _h_ = "\\\\",
    _i_ = "\\'",
    _j_ = "\\b",
    _k_ = "\\t",
    _l_ = "\\n",
    _m_ = "\\r",
    _o_ = cst_tl,
    _n_ = cst_hd,
    _s_ = "Bytes.of_seq: cannot grow bytes",
    _r_ = "String.blit / Bytes.blit_string",
    _q_ = "Bytes.blit",
    _p_ = "String.sub / Bytes.sub",
    _u_ = cst$0,
    _t_ = "String.concat",
    _v_ = "Stdlib.Stack.Empty",
    _w_ = "Buffer.add: cannot grow buffer",
    _F_ = "%c",
    _G_ = "%s",
    _H_ = cst_i,
    _I_ = cst_li,
    _J_ = cst_ni,
    _K_ = cst_Li,
    _L_ = "%f",
    _M_ = "%B",
    _N_ = "%{",
    _O_ = "%}",
    _P_ = "%(",
    _Q_ = "%)",
    _R_ = "%a",
    _S_ = "%t",
    _U_ = "%?",
    _V_ = "%r",
    _W_ = "%_r",
    _X_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _ag_ = [0, cst_camlinternalFormat_ml, 814, 21],
    ___ = [0, cst_camlinternalFormat_ml, 815, 21],
    _ah_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _$_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _ai_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _aa_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _aj_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _ab_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _ak_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _ac_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _ae_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _Y_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _af_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _Z_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _ad_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _be_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bf_ = "Printf: bad conversion %[",
    _bg_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bh_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _bi_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bj_ = "Printf: bad conversion %_",
    _bk_ = cst$1,
    _bl_ = cst$2,
    _bm_ = cst$1,
    _bn_ = cst$2,
    _bd_ = "nan",
    _bb_ = "neg_infinity",
    _bc_ = "infinity",
    _ba_ = cst,
    _a0_ = "%+nd",
    _a1_ = "% nd",
    _a3_ = "%+ni",
    _a4_ = "% ni",
    _a5_ = "%nx",
    _a6_ = "%#nx",
    _a7_ = "%nX",
    _a8_ = "%#nX",
    _a9_ = "%no",
    _a__ = "%#no",
    _aZ_ = "%nd",
    _a2_ = cst_ni,
    _a$_ = "%nu",
    _aN_ = "%+ld",
    _aO_ = "% ld",
    _aQ_ = "%+li",
    _aR_ = "% li",
    _aS_ = "%lx",
    _aT_ = "%#lx",
    _aU_ = "%lX",
    _aV_ = "%#lX",
    _aW_ = "%lo",
    _aX_ = "%#lo",
    _aM_ = "%ld",
    _aP_ = cst_li,
    _aY_ = "%lu",
    _aA_ = "%+Ld",
    _aB_ = "% Ld",
    _aD_ = "%+Li",
    _aE_ = "% Li",
    _aF_ = "%Lx",
    _aG_ = "%#Lx",
    _aH_ = "%LX",
    _aI_ = "%#LX",
    _aJ_ = "%Lo",
    _aK_ = "%#Lo",
    _az_ = "%Ld",
    _aC_ = cst_Li,
    _aL_ = "%Lu",
    _an_ = "%+d",
    _ao_ = "% d",
    _aq_ = "%+i",
    _ar_ = "% i",
    _as_ = "%x",
    _at_ = "%#x",
    _au_ = "%X",
    _av_ = "%#X",
    _aw_ = "%o",
    _ax_ = "%#o",
    _am_ = cst_d,
    _ap_ = cst_i,
    _ay_ = cst_u,
    _x_ = "@]",
    _y_ = "@}",
    _z_ = "@?",
    _A_ = "@\n",
    _B_ = "@.",
    _C_ = "@@",
    _D_ = "@%",
    _E_ = "@",
    _al_ = "CamlinternalFormat.Type_mismatch",
    _br_ = cst$0,
    _bs_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _bO_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _bP_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _bN_ = "Fatal error: out of memory in uncaught exception handler",
    _bM_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _bK_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _bC_ = "Raised at",
    _bD_ = "Re-raised at",
    _bE_ = "Raised by primitive operation at",
    _bF_ = "Called from",
    _bG_ = " (inlined)",
    _bI_ = cst$0,
    _bH_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _bJ_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _bx_ = "Out of memory",
    _by_ = "Stack overflow",
    _bz_ = "Pattern matching failed",
    _bA_ = "Assertion failed",
    _bB_ = "Undefined recursive module",
    _bt_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _bu_ = cst$0,
    _bv_ = cst$0,
    _bw_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _bq_ = [0, [4, 0, 0, 0, 0], cst_d],
    _bo_ = [0, [3, 0, 0], "%S"],
    _bp_ = "_",
    _bL_ =
      [0,
       cst$0,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _bR_ = "Fun.Finally_raised: ",
    _bQ_ = "Stdlib.Fun.Finally_raised",
    _bS_ =
      "In_channel.input_all: channel content is larger than maximum string length",
    _bX_ = cst$3,
    _bV_ = " ]",
    _bU_ = cst$3,
    _bT_ = "[",
    _bW_ = cst$4,
    _bY_ = cst$4,
    _cv_ = cst_Bad_function_definition,
    _cw_ = '", not EOF',
    _cx_ = 'Expected end character "',
    _cy_ = cst_Bad_function_definition,
    _cF_ = cst_take,
    _cE_ = cst_take,
    _cB_ = "Expected a Quote of Strings or Chars",
    _cC_ = cst$0,
    _cD_ = cst$3,
    _cz_ = '"',
    _cA_ = 'Undefined Word "',
    _cG_ = cst_4ish,
    _cu_ = "Expected end of string, not EOF",
    _ct_ = "Expected end of comment, not EOF",
    _cr_ = cst_false,
    _cs_ = [0, [2, 0]],
    _cp_ = cst_true,
    _cq_ = [0, [2, 1]],
    _co_ = "Number is too large",
    _cm_ = "Unexpected Word Configuration",
    _cn_ = "Impossible Word Configuration",
    _ck_ = " expected either Ints, Strings or Bools",
    _cl_ = cst_Function,
    _ci_ = cst_expected_either_Ints_or_St,
    _cj_ = cst_Function,
    _cg_ = cst_expected_either_Ints_or_St,
    _ch_ = cst_Function,
    _cc_ = cst_expected_a_Non_Empty_Quote,
    _cd_ = cst_Function,
    _ce_ = cst_expected_a_Non_Empty_Quote,
    _cf_ = cst_Function,
    _ca_ = " expected a Quote Argument",
    _cb_ = cst_Function,
    _b__ = " expected a String Argument",
    _b$_ = cst_Function,
    _b8_ = " expected an Int Argument",
    _b9_ = cst_Function,
    _b6_ = " expected a Bool Argument",
    _b7_ = cst_Function,
    _b4_ = cst_expected_another_Argument_,
    _b5_ = cst_Function,
    _b2_ = cst_expected_another_Argument_,
    _b3_ = cst_Function,
    _b1_ = cst$0,
    _bZ_ = "Forthish.Parser.Parse_err",
    _b0_ = "Forthish.Parser.Eval_err",
    _cH_ = "Jsoo_runtime.Error.Exn",
    _cS_ = "<br/>",
    _cQ_ = [0, cst_web_main_ml, 200, 17],
    _cP_ = [0, cst_web_main_ml, 195, 17],
    _cR_ = cst$0,
    _cJ_ = cst$0,
    _cK_ = "Err! No Such Definition",
    _cL_ = "Err! Empty Stack",
    _cM_ = "Err! Division by Zero",
    _cN_ = "Cannot Exit the Browser",
    _cO_ = "Unknown Failure",
    _cI_ = cst$0;
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   var Exit = [248, _a_, caml_fresh_oo_id(0)];
   function abs(x){return 0 <= x ? x : - x | 0;}
   function symbol(s1, s2){
    var
     l1 = caml_ml_string_length(s1),
     l2 = caml_ml_string_length(s2),
     s = caml_create_bytes(l1 + l2 | 0);
    caml_blit_string(s1, 0, s, 0, l1);
    caml_blit_string(s2, 0, s, l1, l2);
    return caml_string_of_bytes(s);
   }
   function string_of_bool(b){return b ? _b_ : _c_;}
   function symbol$0(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol$0(tl, l2)];
   }
   var
    stdin = caml_ml_open_descriptor_in(0),
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2);
   function flush_all(param){
    var param$0 = caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_go_){
      var _gn_ = caml_wrap_exception(_go_);
      if(_gn_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_gn_, 0);
     }
     var param$0 = l;
    }
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function open_text(name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, 0));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   var exit_function = [0, flush_all];
   function do_at_exit(param){
    return caml_call1(caml_atomic_load(exit_function), 0);
   }
   caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function empty(param){return 0;}
   function map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    function _gl_(_gm_){return map(f, next, _gm_);}
    return [0, caml_call1(f, x), _gl_];
   }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return acc$0;
     var
      next = match[2],
      x = match[1],
      acc$1 = caml_call2(f, acc$0, x),
      acc$0 = acc$1,
      seq$0 = next;
    }
   }
   function compare(cmp, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(! match) return match$0 ? -1 : 0;
     var xs$1 = match[2], x = match[1];
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], c = caml_call2(cmp, x, y);
     if(0 !== c) return c;
     var xs$0 = xs$1, ys$0 = ys$1;
    }
   }
   function take_aux(n, xs){
    return 0 === n
            ? empty
            : function
             (param){
              var match = caml_call1(xs, 0);
              if(! match) return 0;
              var xs$0 = match[2], x = match[1];
              return [0, x, take_aux(n - 1 | 0, xs$0)];
             };
   }
   function take(n, xs){if(n < 0) invalid_arg(_f_); return take_aux(n, xs);}
   function drop(n, xs){
    return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                for(;;){
                 var match = caml_call1(xs$0, 0);
                 if(! match) return 0;
                 var xs$1 = match[2], n$1 = n$0 - 1 | 0;
                 if(0 === n$1) return caml_call1(xs$1, 0);
                 var n$0 = n$1, xs$0 = xs$1;
                }
               }
            : invalid_arg(_g_);
   }
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function hd(param){
    if(! param) return failwith(_n_);
    var a = param[1];
    return a;
   }
   function rev(l1$1){
    var l1 = l1$1, l2 = 0;
    for(;;){
     if(! l1) return l2;
     var l1$0 = l1[2], a = l1[1], l2$0 = [0, a, l2], l1 = l1$0, l2 = l2$0;
    }
   }
   function map$0(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map$0(f, l)];
   }
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param) return accu;
     var
      l$0 = param[2],
      a = param[1],
      accu$0 = [0, caml_call1(f, a), accu],
      accu = accu$0,
      param = l$0;
    }
   }
   function fold_left$0(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var
      l$1 = l$0[2],
      a = l$0[1],
      accu$1 = caml_call2(f, accu$0, a),
      accu$0 = accu$1,
      l$0 = l$1;
    }
   }
   function remove_assoc(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return 0 === caml_compare(a, x) ? l : [0, pair, remove_assoc(x, l)];
   }
   function compare$0(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], a2 = l2$0[1], c = caml_call2(cmp, a1, a2);
     if(0 !== c) return c;
     var l1$0 = l1$1, l2$0 = l2$1;
    }
   }
   function to_seq(l){
    function aux(l, param){
     if(! l) return 0;
     var tail = l[2], x = l[1];
     return [0, x, function(_gk_){return aux(tail, _gk_);}];
    }
    return function(_gj_){return aux(l, _gj_);};
   }
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   var empty$0 = caml_create_bytes(0);
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return invalid_arg(_p_);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return invalid_arg(_q_);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_string(s1, ofs1, s2, ofs2, len);
    return invalid_arg(_r_);
   }
   function is_space(param){
    var _gi_ = param - 9 | 0, switch$0 = 0;
    if(4 < _gi_ >>> 0){
     if(23 === _gi_) switch$0 = 1;
    }
    else if(2 !== _gi_) switch$0 = 1;
    return switch$0 ? 1 : 0;
   }
   function make$0(n, c){return caml_string_of_bytes(make(n, c));}
   function sub$0(s, ofs, len){
    return caml_string_of_bytes(sub(caml_bytes_of_string(s), ofs, len));
   }
   function concat(sep, l){
    if(! l) return _u_;
    var seplen = caml_ml_string_length(sep), acc = 0, param = l, pos$1 = 0;
    for(;;){
     if(param){
      var hd = param[1];
      if(param[2]){
       var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : invalid_arg(_t_),
        acc = acc$0,
        param = tl;
       continue;
      }
      var _gh_ = caml_ml_string_length(hd) + acc | 0;
     }
     else
      var _gh_ = acc;
     var dst = caml_create_bytes(_gh_), pos = pos$1, param$0 = l;
     for(;;){
      if(param$0){
       var hd$0 = param$0[1];
       if(param$0[2]){
        var tl$0 = param$0[2];
        caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
        caml_blit_string
         (sep, 0, dst, pos + caml_ml_string_length(hd$0) | 0, seplen);
        var
         pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0,
         pos = pos$0,
         param$0 = tl$0;
        continue;
       }
       caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
      }
      return caml_string_of_bytes(dst);
     }
    }
   }
   function is_space$0(param){
    var _gg_ = param - 9 | 0, switch$0 = 0;
    if(4 < _gg_ >>> 0){
     if(23 === _gg_) switch$0 = 1;
    }
    else if(2 !== _gg_) switch$0 = 1;
    return switch$0 ? 1 : 0;
   }
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(s)],
     _gc_ = caml_ml_string_length(s) - 1 | 0;
    if(_gc_ >= 0){
     var i = _gc_;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var _ge_ = r[1];
       r[1] = [0, sub$0(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _ge_];
       j[1] = i;
      }
      var _gf_ = i - 1 | 0;
      if(0 !== i){var i = _gf_; continue;}
      break;
     }
    }
    var _gd_ = r[1];
    return [0, sub$0(s, 0, j[1]), _gd_];
   }
   function to_seq$0(s){
    var s$0 = caml_bytes_of_string(s);
    function aux(i, param){
     if(i === caml_ml_bytes_length(s$0)) return 0;
     var x = caml_bytes_get(s$0, i), _ga_ = i + 1 | 0;
     return [0, x, function(_gb_){return aux(_ga_, _gb_);}];
    }
    var _f__ = 0;
    return function(_f$_){return aux(_f__, _f$_);};
   }
   function of_seq(seq$0){
    var n = [0, 0], buf = [0, make(256, 0)], seq = seq$0;
    for(;;){
     var match = caml_call1(seq, 0);
     if(! match) return caml_string_of_bytes(sub(buf[1], 0, n[1]));
     var next = match[2], x = match[1];
     if(n[1] === caml_ml_bytes_length(buf[1])){
      var
       x$0 = 2 * caml_ml_bytes_length(buf[1]) | 0,
       new_len = x$0 <= max_string_length ? x$0 : max_string_length;
      if(caml_ml_bytes_length(buf[1]) === new_len) failwith(_s_);
      var new_buf = make(new_len, 0);
      blit(buf[1], 0, new_buf, 0, n[1]);
      buf[1] = new_buf;
     }
     caml_bytes_set(buf[1], n[1], x);
     n[1]++;
     var seq = next;
    }
   }
   var Empty = [248, _v_, caml_fresh_oo_id(0)];
   function resize(b, more){
    var old_pos = b[2], old_len = b[1][2], new_len = [0, old_len];
    for(;;){
     if(new_len[1] < (old_pos + more | 0)){
      new_len[1] = 2 * new_len[1] | 0;
      continue;
     }
     if(max_string_length < new_len[1])
      if((old_pos + more | 0) <= max_string_length)
       new_len[1] = max_string_length;
      else
       failwith(_w_);
     var new_buffer = caml_create_bytes(new_len[1]);
     blit(b[1][1], 0, new_buffer, 0, b[2]);
     b[1] = [0, new_buffer, new_len[1]];
     return 0;
    }
   }
   function add_string(b, s){
    var
     len = caml_ml_string_length(s),
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = b[2] + len | 0;
    if(length < new_position){
     resize(b, len);
     blit_string(s, 0, b[1][1], b[2], len);
    }
    else
     caml_blit_string(s, 0, buffer, position, len);
    b[2] = new_position;
    return 0;
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0,
     _f8_ = len < min_len ? 1 : 0;
    if(_f8_){
     var
      x = len * 2 | 0,
      new_len = min_len <= x ? x : min_len,
      new_str = caml_create_bytes(new_len);
     blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
     var _f9_ = 0;
    }
    else
     var _f9_ = _f8_;
    return _f9_;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return 0;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    blit_string(s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return 0;
   }
   function buffer_contents(buf){return sub_string(buf[2], 0, buf[1]);}
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return _x_;
       case 1:
        return _y_;
       case 2:
        return _z_;
       case 3:
        return _A_;
       case 4:
        return _B_;
       case 5:
        return _C_;
       default: return _D_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default: var c = formatting_lit[1]; return symbol(_E_, make$0(1, c));
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, _F_);
        var fmtty$0 = fmtty$1;
        continue;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, _G_);
        var fmtty$0 = fmtty$2;
        continue;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, _H_);
        var fmtty$0 = fmtty$3;
        continue;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, _I_);
        var fmtty$0 = fmtty$4;
        continue;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, _J_);
        var fmtty$0 = fmtty$5;
        continue;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, _K_);
        var fmtty$0 = fmtty$6;
        continue;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, _L_);
        var fmtty$0 = fmtty$7;
        continue;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, _M_);
        var fmtty$0 = fmtty$8;
        continue;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, _N_);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, _O_);
        var fmtty$0 = fmtty$9;
        continue;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, _P_);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, _Q_);
        var fmtty$0 = fmtty$10;
        continue;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, _R_);
        var fmtty$0 = fmtty$11;
        continue;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, _S_);
        var fmtty$0 = fmtty$12;
        continue;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, _U_);
        var fmtty$0 = fmtty$13;
        continue;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, _V_);
        var fmtty$0 = fmtty$14;
        continue;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, _W_);
        var fmtty$0 = fmtty$15;
        continue;
     }
    }
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param !== "number")
     switch(param[0]){
       case 0:
        var
         rest = param[1],
         match = fmtty_rel_det(rest),
         de = match[4],
         ed = match[3],
         af = match[2],
         fa = match[1],
         _fN_ = function(param){af(0); return 0;};
        return [0, function(param){fa(0); return 0;}, _fN_, ed, de];
       case 1:
        var
         rest$0 = param[1],
         match$0 = fmtty_rel_det(rest$0),
         de$0 = match$0[4],
         ed$0 = match$0[3],
         af$0 = match$0[2],
         fa$0 = match$0[1],
         _fO_ = function(param){af$0(0); return 0;};
        return [0, function(param){fa$0(0); return 0;}, _fO_, ed$0, de$0];
       case 2:
        var
         rest$1 = param[1],
         match$1 = fmtty_rel_det(rest$1),
         de$1 = match$1[4],
         ed$1 = match$1[3],
         af$1 = match$1[2],
         fa$1 = match$1[1],
         _fP_ = function(param){af$1(0); return 0;};
        return [0, function(param){fa$1(0); return 0;}, _fP_, ed$1, de$1];
       case 3:
        var
         rest$2 = param[1],
         match$2 = fmtty_rel_det(rest$2),
         de$2 = match$2[4],
         ed$2 = match$2[3],
         af$2 = match$2[2],
         fa$2 = match$2[1],
         _fQ_ = function(param){af$2(0); return 0;};
        return [0, function(param){fa$2(0); return 0;}, _fQ_, ed$2, de$2];
       case 4:
        var
         rest$3 = param[1],
         match$3 = fmtty_rel_det(rest$3),
         de$3 = match$3[4],
         ed$3 = match$3[3],
         af$3 = match$3[2],
         fa$3 = match$3[1],
         _fR_ = function(param){af$3(0); return 0;};
        return [0, function(param){fa$3(0); return 0;}, _fR_, ed$3, de$3];
       case 5:
        var
         rest$4 = param[1],
         match$4 = fmtty_rel_det(rest$4),
         de$4 = match$4[4],
         ed$4 = match$4[3],
         af$4 = match$4[2],
         fa$4 = match$4[1],
         _fS_ = function(param){af$4(0); return 0;};
        return [0, function(param){fa$4(0); return 0;}, _fS_, ed$4, de$4];
       case 6:
        var
         rest$5 = param[1],
         match$5 = fmtty_rel_det(rest$5),
         de$5 = match$5[4],
         ed$5 = match$5[3],
         af$5 = match$5[2],
         fa$5 = match$5[1],
         _fT_ = function(param){af$5(0); return 0;};
        return [0, function(param){fa$5(0); return 0;}, _fT_, ed$5, de$5];
       case 7:
        var
         rest$6 = param[1],
         match$6 = fmtty_rel_det(rest$6),
         de$6 = match$6[4],
         ed$6 = match$6[3],
         af$6 = match$6[2],
         fa$6 = match$6[1],
         _fU_ = function(param){af$6(0); return 0;};
        return [0, function(param){fa$6(0); return 0;}, _fU_, ed$6, de$6];
       case 8:
        var
         rest$7 = param[2],
         match$7 = fmtty_rel_det(rest$7),
         de$7 = match$7[4],
         ed$7 = match$7[3],
         af$7 = match$7[2],
         fa$7 = match$7[1],
         _fV_ = function(param){af$7(0); return 0;};
        return [0, function(param){fa$7(0); return 0;}, _fV_, ed$7, de$7];
       case 9:
        var
         rest$8 = param[3],
         ty2 = param[2],
         ty1 = param[1],
         match$8 = fmtty_rel_det(rest$8),
         de$8 = match$8[4],
         ed$8 = match$8[3],
         af$8 = match$8[2],
         fa$8 = match$8[1],
         ty = trans(symm(ty1), ty2),
         match$9 = fmtty_rel_det(ty),
         jd = match$9[4],
         dj = match$9[3],
         ga = match$9[2],
         ag = match$9[1],
         _fW_ = function(param){jd(0); de$8(0); return 0;},
         _fX_ = function(param){ed$8(0); dj(0); return 0;},
         _fY_ = function(param){ga(0); af$8(0); return 0;};
        return [0,
                function(param){fa$8(0); ag(0); return 0;},
                _fY_,
                _fX_,
                _fW_];
       case 10:
        var
         rest$9 = param[1],
         match$10 = fmtty_rel_det(rest$9),
         de$9 = match$10[4],
         ed$9 = match$10[3],
         af$9 = match$10[2],
         fa$9 = match$10[1],
         _fZ_ = function(param){af$9(0); return 0;};
        return [0, function(param){fa$9(0); return 0;}, _fZ_, ed$9, de$9];
       case 11:
        var
         rest$10 = param[1],
         match$11 = fmtty_rel_det(rest$10),
         de$10 = match$11[4],
         ed$10 = match$11[3],
         af$10 = match$11[2],
         fa$10 = match$11[1],
         _f0_ = function(param){af$10(0); return 0;};
        return [0, function(param){fa$10(0); return 0;}, _f0_, ed$10, de$10];
       case 12:
        var
         rest$11 = param[1],
         match$12 = fmtty_rel_det(rest$11),
         de$11 = match$12[4],
         ed$11 = match$12[3],
         af$11 = match$12[2],
         fa$11 = match$12[1],
         _f1_ = function(param){af$11(0); return 0;};
        return [0, function(param){fa$11(0); return 0;}, _f1_, ed$11, de$11];
       case 13:
        var
         rest$12 = param[1],
         match$13 = fmtty_rel_det(rest$12),
         de$12 = match$13[4],
         ed$12 = match$13[3],
         af$12 = match$13[2],
         fa$12 = match$13[1],
         _f2_ = function(param){de$12(0); return 0;},
         _f3_ = function(param){ed$12(0); return 0;},
         _f4_ = function(param){af$12(0); return 0;};
        return [0, function(param){fa$12(0); return 0;}, _f4_, _f3_, _f2_];
       default:
        var
         rest$13 = param[1],
         match$14 = fmtty_rel_det(rest$13),
         de$13 = match$14[4],
         ed$13 = match$14[3],
         af$13 = match$14[2],
         fa$13 = match$14[1],
         _f5_ = function(param){de$13(0); return 0;},
         _f6_ = function(param){ed$13(0); return 0;},
         _f7_ = function(param){af$13(0); return 0;};
        return [0, function(param){fa$13(0); return 0;}, _f7_, _f6_, _f5_];
     }
    function _fK_(param){return 0;}
    function _fL_(param){return 0;}
    function _fM_(param){return 0;}
    return [0, function(param){return 0;}, _fM_, _fL_, _fK_];
   }
   function trans(ty1, ty2){
    var switch$0 = 0;
    if(typeof ty1 === "number"){
     if(typeof ty2 === "number") return 0;
     switch(ty2[0]){
       case 10: break;
       case 11:
        switch$0 = 1; break;
       case 12:
        switch$0 = 2; break;
       case 13:
        switch$0 = 3; break;
       case 14:
        switch$0 = 4; break;
       case 8:
        switch$0 = 5; break;
       case 9:
        switch$0 = 6; break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
     }
    }
    else
     switch(ty1[0]){
       case 0:
        var rest1 = ty1[1], switch$1 = 0;
        if(typeof ty2 === "number")
         switch$1 = 1;
        else
         switch(ty2[0]){
           case 0:
            var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$1 = 1;
         }
        if(switch$1) switch$0 = 7;
        break;
       case 1:
        var rest1$0 = ty1[1], switch$2 = 0;
        if(typeof ty2 === "number")
         switch$2 = 1;
        else
         switch(ty2[0]){
           case 1:
            var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$2 = 1;
         }
        if(switch$2) switch$0 = 7;
        break;
       case 2:
        var rest1$1 = ty1[1], switch$3 = 0;
        if(typeof ty2 === "number")
         switch$3 = 1;
        else
         switch(ty2[0]){
           case 2:
            var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$3 = 1;
         }
        if(switch$3) switch$0 = 7;
        break;
       case 3:
        var rest1$2 = ty1[1], switch$4 = 0;
        if(typeof ty2 === "number")
         switch$4 = 1;
        else
         switch(ty2[0]){
           case 3:
            var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$4 = 1;
         }
        if(switch$4) switch$0 = 7;
        break;
       case 4:
        var rest1$3 = ty1[1], switch$5 = 0;
        if(typeof ty2 === "number")
         switch$5 = 1;
        else
         switch(ty2[0]){
           case 4:
            var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$5 = 1;
         }
        if(switch$5) switch$0 = 7;
        break;
       case 5:
        var rest1$4 = ty1[1], switch$6 = 0;
        if(typeof ty2 === "number")
         switch$6 = 1;
        else
         switch(ty2[0]){
           case 5:
            var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$6 = 1;
         }
        if(switch$6) switch$0 = 7;
        break;
       case 6:
        var rest1$5 = ty1[1], switch$7 = 0;
        if(typeof ty2 === "number")
         switch$7 = 1;
        else
         switch(ty2[0]){
           case 6:
            var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$7 = 1;
         }
        if(switch$7) switch$0 = 7;
        break;
       case 7:
        var rest1$6 = ty1[1], switch$8 = 0;
        if(typeof ty2 === "number")
         switch$8 = 1;
        else
         switch(ty2[0]){
           case 7:
            var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$8 = 1;
         }
        if(switch$8) switch$0 = 7;
        break;
       case 8:
        var rest1$7 = ty1[2], ty1$0 = ty1[1], switch$9 = 0;
        if(typeof ty2 === "number")
         switch$9 = 1;
        else
         switch(ty2[0]){
           case 8:
            var
             rest2$7 = ty2[2],
             ty2$0 = ty2[1],
             _fJ_ = trans(rest1$7, rest2$7);
            return [8, trans(ty1$0, ty2$0), _fJ_];
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$9 = 1;
         }
        if(switch$9)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ae_], 1);
        break;
       case 9:
        var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1], switch$10 = 0;
        if(typeof ty2 === "number")
         switch$10 = 1;
        else
         switch(ty2[0]){
           case 8:
            switch$0 = 5; break;
           case 9:
            var
             rest2$8 = ty2[3],
             ty22 = ty2[2],
             ty21 = ty2[1],
             ty = trans(symm(ty12), ty21),
             match = fmtty_rel_det(ty),
             f4 = match[4],
             f2 = match[2];
            f2(0);
            f4(0);
            return [9, ty11, ty22, trans(rest1$8, rest2$8)];
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$10 = 1;
         }
        if(switch$10)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _af_], 1);
        break;
       case 10:
        var rest1$9 = ty1[1];
        if(typeof ty2 !== "number" && 10 === ty2[0]){
         var rest2$9 = ty2[1];
         return [10, trans(rest1$9, rest2$9)];
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ag_], 1);
       case 11:
        var rest1$10 = ty1[1], switch$11 = 0;
        if(typeof ty2 === "number")
         switch$11 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            var rest2$10 = ty2[1]; return [11, trans(rest1$10, rest2$10)];
           default: switch$11 = 1;
         }
        if(switch$11)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ah_], 1);
        break;
       case 12:
        var rest1$11 = ty1[1], switch$12 = 0;
        if(typeof ty2 === "number")
         switch$12 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            var rest2$11 = ty2[1]; return [12, trans(rest1$11, rest2$11)];
           default: switch$12 = 1;
         }
        if(switch$12)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ai_], 1);
        break;
       case 13:
        var rest1$12 = ty1[1], switch$13 = 0;
        if(typeof ty2 === "number")
         switch$13 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            var rest2$12 = ty2[1]; return [13, trans(rest1$12, rest2$12)];
           default: switch$13 = 1;
         }
        if(switch$13)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aj_], 1);
        break;
       default:
        var rest1$13 = ty1[1], switch$14 = 0;
        if(typeof ty2 === "number")
         switch$14 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            var rest2$13 = ty2[1]; return [14, trans(rest1$13, rest2$13)];
           default: switch$14 = 1;
         }
        if(switch$14)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ak_], 1);
     }
    switch(switch$0){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, ___], 1);
      case 1:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _$_], 1);
      case 2:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
      case 3:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
      case 4:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ac_], 1);
      case 5:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
      case 6:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
      default:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ad_], 1);
    }
   }
   var Type_mismatch = [248, _al_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _fH_ = [0, erase_rel(sub_fmtty1)];
        if(caml_notequal([0, erase_rel(sub_fmtty$1)], _fH_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 = type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _fI_ = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = _fI_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _fI_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty0);
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 = type_format_gen(rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty0);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _fF_ = [0, erase_rel(sub1_fmtty)];
        if(caml_notequal([0, erase_rel(sub1_fmtty$0)], _fF_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _fG_ = [0, erase_rel(sub2_fmtty$1)];
        if(caml_notequal([0, erase_rel(sub2_fmtty$2)], _fG_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = abs(width);
    if(width$0 <= len) return str;
    var _fE_ = 2 === padty$0 ? 48 : 32, res = make(width$0, _fE_);
    switch(padty$0){
      case 0:
       blit_string(str, 0, res, 0, len); break;
      case 1:
       blit_string(str, 0, res, width$0 - len | 0, len); break;
      default:
       var switch$0 = 0;
       if(0 < len){
        var switch$1 = 0;
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0)){switch$0 = 1; switch$1 = 1;}
        if(! switch$1){
         caml_bytes_set(res, 0, caml_string_get(str, 0));
         blit_string(str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        }
       }
       else
        switch$0 = 1;
       if(switch$0){
        var switch$2 = 0;
        if(1 < len && 48 === caml_string_get(str, 0)){
         var switch$3 = 0;
         if(120 === caml_string_get(str, 1) || 88 === caml_string_get(str, 1))
          switch$3 = 1;
         if(switch$3){
          caml_bytes_set(res, 1, caml_string_get(str, 1));
          blit_string(str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
          switch$2 = 1;
         }
        }
        if(! switch$2) blit_string(str, 0, res, width$0 - len | 0, len);
       }
    }
    return caml_string_of_bytes(res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = abs(prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0),
     switch$0 = 0;
    if(58 <= c){
     if(71 <= c){
      if(5 >= c - 97 >>> 0) switch$0 = 1;
     }
     else if(65 <= c) switch$0 = 1;
    }
    else{
     var switch$1 = 0;
     if(32 === c)
      switch$1 = 1;
     else if(43 <= c)
      switch(c - 43 | 0){
        case 5:
         if(len < (prec$0 + 2 | 0) && 1 < len){
          var switch$2 = 0;
          if
           (120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
           switch$2 = 1;
          if(! switch$2){
           var res$1 = make(prec$0 + 2 | 0, 48);
           caml_bytes_set(res$1, 1, caml_string_get(str, 1));
           blit_string(str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
           return caml_string_of_bytes(res$1);
          }
         }
         switch$0 = 1;
         break;
        case 0:
        case 2:
         switch$1 = 1; break;
        case 1:
        case 3:
        case 4: break;
        default: switch$0 = 1;
      }
     if(switch$1 && len < (prec$0 + 1 | 0)){
      var res$0 = make(prec$0 + 1 | 0, 48);
      caml_bytes_set(res$0, 0, c);
      blit_string(str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
      return caml_string_of_bytes(res$0);
     }
    }
    if(switch$0 && len < prec$0){
     var res = make(prec$0, 48);
     blit_string(str, 0, res, prec$0 - len | 0, len);
     return caml_string_of_bytes(res);
    }
    return str;
   }
   function string_to_caml_string(str$0){
    var
     b = caml_bytes_of_string(str$0),
     n = [0, 0],
     _fw_ = caml_ml_bytes_length(b) - 1 | 0,
     _fv_ = 0;
    if(_fw_ >= 0){
     var i$0 = _fv_;
     for(;;){
      var match = caml_bytes_unsafe_get(b, i$0), switch$0 = 0;
      if(32 <= match){
       var _fA_ = match - 34 | 0, switch$1 = 0;
       if(58 < _fA_ >>> 0){
        if(93 > _fA_) switch$1 = 1;
       }
       else if(56 < _fA_ - 1 >>> 0) switch$0 = 1; else switch$1 = 1;
       if(switch$1){var _fB_ = 1; switch$0 = 2;}
      }
      else
       if(11 <= match){
        if(13 === match) switch$0 = 1;
       }
       else if(8 <= match) switch$0 = 1;
      switch(switch$0){
        case 0:
         var _fB_ = 4; break;
        case 1:
         var _fB_ = 2; break;
      }
      n[1] = n[1] + _fB_ | 0;
      var _fC_ = i$0 + 1 | 0;
      if(_fw_ !== i$0){var i$0 = _fC_; continue;}
      break;
     }
    }
    if(n[1] === caml_ml_bytes_length(b))
     var _fD_ = b;
    else{
     var s = caml_create_bytes(n[1]);
     n[1] = 0;
     var _fy_ = caml_ml_bytes_length(b) - 1 | 0, _fx_ = 0;
     if(_fy_ >= 0){
      var i = _fx_;
      for(;;){
       var c = caml_bytes_unsafe_get(b, i), switch$2 = 0;
       if(35 <= c)
        if(92 === c)
         switch$2 = 2;
        else if(127 <= c) switch$2 = 1; else switch$2 = 3;
       else if(32 <= c)
        if(34 <= c) switch$2 = 2; else switch$2 = 3;
       else if(14 <= c)
        switch$2 = 1;
       else
        switch(c){
          case 8:
           caml_bytes_unsafe_set(s, n[1], 92);
           n[1]++;
           caml_bytes_unsafe_set(s, n[1], 98);
           break;
          case 9:
           caml_bytes_unsafe_set(s, n[1], 92);
           n[1]++;
           caml_bytes_unsafe_set(s, n[1], 116);
           break;
          case 10:
           caml_bytes_unsafe_set(s, n[1], 92);
           n[1]++;
           caml_bytes_unsafe_set(s, n[1], 110);
           break;
          case 13:
           caml_bytes_unsafe_set(s, n[1], 92);
           n[1]++;
           caml_bytes_unsafe_set(s, n[1], 114);
           break;
          default: switch$2 = 1;
        }
       switch(switch$2){
         case 1:
          caml_bytes_unsafe_set(s, n[1], 92);
          n[1]++;
          caml_bytes_unsafe_set(s, n[1], 48 + (c / 100 | 0) | 0);
          n[1]++;
          caml_bytes_unsafe_set(s, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
          n[1]++;
          caml_bytes_unsafe_set(s, n[1], 48 + (c % 10 | 0) | 0);
          break;
         case 2:
          caml_bytes_unsafe_set(s, n[1], 92);
          n[1]++;
          caml_bytes_unsafe_set(s, n[1], c);
          break;
         case 3:
          caml_bytes_unsafe_set(s, n[1], c); break;
       }
       n[1]++;
       var _fz_ = i + 1 | 0;
       if(_fy_ !== i){var i = _fz_; continue;}
       break;
      }
     }
     var _fD_ = s;
    }
    var
     str = caml_string_of_bytes(_fD_),
     l = caml_ml_string_length(str),
     res = make(l + 2 | 0, 34);
    caml_blit_string(str, 0, res, 1, l);
    return caml_string_of_bytes(res);
   }
   function format_of_fconv(fconv, prec){
    var prec$0 = abs(prec), sth = opt[1];
    switch(fconv[2]){
      case 0:
       var symb = 102; break;
      case 1:
       var symb = 101; break;
      case 2:
       var symb = 69; break;
      case 3:
       var symb = 103; break;
      case 4:
       var symb = 71; break;
      case 5:
       var symb = sth; break;
      case 6:
       var symb = 104; break;
      case 7:
       var symb = 72; break;
      default: var symb = 70;
    }
    var buf = buffer_create(16);
    buffer_add_char(buf, 37);
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) buffer_add_char(buf, 35);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, "" + prec$0);
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _fq_ = caml_ml_string_length(s) - 1 | 0, _fp_ = 0;
    if(_fq_ >= 0){
     var i$0 = _fp_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _fu_ = i$0 + 1 | 0;
      if(_fq_ !== i$0){var i$0 = _fu_; continue;}
      break;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return 0;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _fs_ = caml_ml_string_length(s) - 1 | 0,
     _fr_ = 0;
    if(_fs_ >= 0){
     var i = _fr_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1] += -1; put(c);}
      var _ft_ = i + 1 | 0;
      if(_fs_ !== i){var i = _ft_; continue;}
      break;
     }
    }
    return caml_string_of_bytes(buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _fo_ = _an_; break;
      case 2:
       var _fo_ = _ao_; break;
      case 4:
       var _fo_ = _aq_; break;
      case 5:
       var _fo_ = _ar_; break;
      case 6:
       var _fo_ = _as_; break;
      case 7:
       var _fo_ = _at_; break;
      case 8:
       var _fo_ = _au_; break;
      case 9:
       var _fo_ = _av_; break;
      case 10:
       var _fo_ = _aw_; break;
      case 11:
       var _fo_ = _ax_; break;
      case 0:
      case 13:
       var _fo_ = _am_; break;
      case 3:
      case 14:
       var _fo_ = _ap_; break;
      default: var _fo_ = _ay_;
    }
    return transform_int_alt(iconv, caml_format_int(_fo_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _fn_ = _aN_; break;
      case 2:
       var _fn_ = _aO_; break;
      case 4:
       var _fn_ = _aQ_; break;
      case 5:
       var _fn_ = _aR_; break;
      case 6:
       var _fn_ = _aS_; break;
      case 7:
       var _fn_ = _aT_; break;
      case 8:
       var _fn_ = _aU_; break;
      case 9:
       var _fn_ = _aV_; break;
      case 10:
       var _fn_ = _aW_; break;
      case 11:
       var _fn_ = _aX_; break;
      case 0:
      case 13:
       var _fn_ = _aM_; break;
      case 3:
      case 14:
       var _fn_ = _aP_; break;
      default: var _fn_ = _aY_;
    }
    return transform_int_alt(iconv, caml_format_int(_fn_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _fm_ = _a0_; break;
      case 2:
       var _fm_ = _a1_; break;
      case 4:
       var _fm_ = _a3_; break;
      case 5:
       var _fm_ = _a4_; break;
      case 6:
       var _fm_ = _a5_; break;
      case 7:
       var _fm_ = _a6_; break;
      case 8:
       var _fm_ = _a7_; break;
      case 9:
       var _fm_ = _a8_; break;
      case 10:
       var _fm_ = _a9_; break;
      case 11:
       var _fm_ = _a__; break;
      case 0:
      case 13:
       var _fm_ = _aZ_; break;
      case 3:
      case 14:
       var _fm_ = _a2_; break;
      default: var _fm_ = _a$_;
    }
    return transform_int_alt(iconv, caml_format_int(_fm_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _fl_ = _aA_; break;
      case 2:
       var _fl_ = _aB_; break;
      case 4:
       var _fl_ = _aD_; break;
      case 5:
       var _fl_ = _aE_; break;
      case 6:
       var _fl_ = _aF_; break;
      case 7:
       var _fl_ = _aG_; break;
      case 8:
       var _fl_ = _aH_; break;
      case 9:
       var _fl_ = _aI_; break;
      case 10:
       var _fl_ = _aJ_; break;
      case 11:
       var _fl_ = _aK_; break;
      case 0:
      case 13:
       var _fl_ = _az_; break;
      case 3:
      case 14:
       var _fl_ = _aC_; break;
      default: var _fl_ = _aL_;
    }
    return transform_int_alt(iconv, caml_int64_format(_fl_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = caml_classify_float(x);
     return 3 === match ? x < 0. ? _bb_ : _bc_ : 4 <= match ? _bd_ : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i$0 = 0;
       for(;;){
        if(i$0 === len)
         var _fj_ = 0;
        else{
         var _fi_ = caml_string_get(str, i$0) - 46 | 0, switch$0 = 0;
         if(23 < _fi_ >>> 0){
          if(55 === _fi_) switch$0 = 1;
         }
         else if(21 < _fi_ - 1 >>> 0) switch$0 = 1;
         if(! switch$0){var i$1 = i$0 + 1 | 0, i$0 = i$1; continue;}
         var _fj_ = 1;
        }
        var _fk_ = _fj_ ? str : symbol(str, _ba_);
        return caml_special_val(_fk_);
       }
      case 6:
       return hex(0);
      case 7:
       var
        s$0 = hex(0),
        s = caml_bytes_of_string(s$0),
        l = caml_ml_bytes_length(s);
       if(0 === l)
        var _fh_ = s;
       else{
        var r = caml_create_bytes(l), _ff_ = l - 1 | 0, _fe_ = 0;
        if(_ff_ >= 0){
         var i = _fe_;
         for(;;){
          caml_bytes_unsafe_set
           (r, i, uppercase_ascii(caml_bytes_unsafe_get(s, i)));
          var _fg_ = i + 1 | 0;
          if(_ff_ !== i){var i = _fg_; continue;}
          break;
         }
        }
        var _fh_ = r;
       }
       return caml_string_of_bytes(_fh_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var switch$0 = 0;
         if(40 <= c)
          if(92 === c)
           var str = _h_;
          else if(127 <= c) switch$0 = 1; else switch$0 = 2;
         else if(32 <= c)
          if(39 <= c) var str = _i_; else switch$0 = 2;
         else if(14 <= c)
          switch$0 = 1;
         else
          switch(c){
            case 8:
             var str = _j_; break;
            case 9:
             var str = _k_; break;
            case 10:
             var str = _l_; break;
            case 13:
             var str = _m_; break;
            default: switch$0 = 1;
          }
         switch(switch$0){
           case 1:
            var s = caml_create_bytes(4);
            caml_bytes_unsafe_set(s, 0, 92);
            caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
            caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
            caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
            var str = caml_string_of_bytes(s);
            break;
           case 2:
            var s$0 = caml_create_bytes(1);
            caml_bytes_unsafe_set(s$0, 0, c);
            var str = caml_string_of_bytes(s$0);
            break;
         }
         var l = caml_ml_string_length(str), res = make(l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_string_of_bytes(res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
        var
         rest$9 = fmt$0[1],
         acc$1 = [7, acc$0],
         acc$0 = acc$1,
         fmt$0 = rest$9;
        continue;
       case 11:
        var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
         acc$2 = [2, acc$0, str],
         acc$0 = acc$2,
         fmt$0 = rest$10;
        continue;
       case 12:
        var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
         acc$3 = [3, acc$0, chr],
         acc$0 = acc$3,
         fmt$0 = rest$11;
        continue;
       case 13:
        var rest$12 = fmt$0[3], sub_fmtty = fmt$0[2], buf = buffer_create(16);
        bprint_fmtty(buf, sub_fmtty);
        var ty = buffer_contents(buf);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var
          fmt$0 = param[1],
          fmtty$0 = erase_rel(symm(fmtty)),
          _fd_ = type_format_gen(fmt$0, fmtty$0);
         if(typeof _fd_[2] !== "number")
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         var fmt = _fd_[1];
         return make_printf(k$0, acc$0, concat_fmt(fmt, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit],
         acc$0 = acc$4,
         fmt$0 = rest$16;
        continue;
       case 18:
        var _fb_ = fmt$0[1];
        if(0 === _fb_[0]){
         var
          rest$17 = fmt$0[2],
          fmt$1 = _fb_[1][1],
          k$3 =
            function(acc, k, rest){
             function k$0(kacc){
              return make_printf(k, [1, acc, [0, kacc]], rest);
             }
             return k$0;
            },
          k$1 = k$3(acc$0, k$0, rest$17),
          k$0 = k$1,
          acc$0 = 0,
          fmt$0 = fmt$1;
         continue;
        }
        var
         rest$18 = fmt$0[2],
         fmt$2 = _fb_[1][1],
         k$4 =
           function(acc, k, rest){
            function k$0(kacc){
             return make_printf(k, [1, acc, [1, kacc]], rest);
            }
            return k$0;
           },
         k$2 = k$4(acc$0, k$0, rest$18),
         k$0 = k$2,
         acc$0 = 0,
         fmt$0 = fmt$2;
        continue;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _be_], 1);
       case 20:
        var rest$19 = fmt$0[3], new_acc = [8, acc$0, _bf_];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$1 = counter + 1 | 0;
            return make_invalid_arg(counter$1, k$0, acc$0, rest$22);
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$2 = counter + 1 | 0;
            return make_invalid_arg(counter$2, k$0, acc$0, rest$22);
           case 2:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bg_], 1);
           default:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$3 = counter + 1 | 0;
            return make_invalid_arg(counter$3, k$0, acc$0, rest$22);
         }
        switch(ign[0]){
          case 0:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$4 = counter + 1 | 0;
           return make_invalid_arg(counter$4, k$0, acc$0, rest$22);
          case 1:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$5 = counter + 1 | 0;
           return make_invalid_arg(counter$5, k$0, acc$0, rest$22);
          case 2:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$6 = counter + 1 | 0;
           return make_invalid_arg(counter$6, k$0, acc$0, rest$22);
          case 3:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$7 = counter + 1 | 0;
           return make_invalid_arg(counter$7, k$0, acc$0, rest$22);
          case 4:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$8 = counter + 1 | 0;
           return make_invalid_arg(counter$8, k$0, acc$0, rest$22);
          case 5:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$9 = counter + 1 | 0;
           return make_invalid_arg(counter$9, k$0, acc$0, rest$22);
          case 6:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$10 = counter + 1 | 0;
           return make_invalid_arg(counter$10, k$0, acc$0, rest$22);
          case 7:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$11 = counter + 1 | 0;
           return make_invalid_arg(counter$11, k$0, acc$0, rest$22);
          case 8:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$12 = counter + 1 | 0;
           return make_invalid_arg(counter$12, k$0, acc$0, rest$22);
          case 9:
           var fmtty$0 = ign[2];
           if(counter >= 50)
            return caml_trampoline_return
                    (make_from_fmtty$0, [0, k$0, acc$0, fmtty$0, rest$22]);
           var counter$15 = counter + 1 | 0;
           return make_from_fmtty$0(counter$15, k$0, acc$0, fmtty$0, rest$22);
          case 10:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$13 = counter + 1 | 0;
           return make_invalid_arg(counter$13, k$0, acc$0, rest$22);
          default:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$14 = counter + 1 | 0;
           return make_invalid_arg(counter$14, k$0, acc$0, rest$22);
        }
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _fc_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _fc_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _fc_);
     }
    }
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty(k, acc, concat_fmtty(ty, rest$8), fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _fa_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bh_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bi_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _e$_ = [8, acc, _bj_];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _e$_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _e$_, fmt);
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _e__ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _e__, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _e__, rest);
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         output_string(o, _bk_);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match[1];
        output_acc(o, p$0);
        output_string(o, _bl_);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1]; output_acc(o, p$4); return caml_ml_flush(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_ml_output_char(o, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return add_string(b, s);
       case 1:
        var match$0 = acc$0[2], p$0 = acc$0[1];
        if(0 === match$0[0]){
         var acc$1 = match$0[1];
         strput_acc(b, p$0);
         add_string(b, _bm_);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match$0[1];
        strput_acc(b, p$0);
        add_string(b, _bn_);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        return add_string(b, caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1], acc$0 = acc$3; continue;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        var pos = b[2], match = b[1], length = match[2], buffer = match[1];
        if(length <= pos){
         resize(b, 1);
         caml_bytes_set(b[1][1], b[2], c);
        }
        else
         caml_bytes_unsafe_set(buffer, pos, c);
        b[2] = pos + 1 | 0;
        return 0;
     }
    }
   }
   function fprintf(oc, fmt$0){
    var fmt = fmt$0[1], _e9_ = 0;
    return make_printf
            (function(acc){output_acc(oc, acc); return 0;}, _e9_, fmt);
   }
   function eprintf(fmt){return fprintf(stderr, fmt);}
   function sprintf(fmt$0){
    var fmt = fmt$0[1];
    function k(acc){
     var
      n$0 = 64,
      n = max_string_length < 64 ? max_string_length : n$0,
      s = caml_create_bytes(n),
      buf = [0, [0, s, n], 0, s];
     strput_acc(buf, acc);
     return sub_string(buf[1][1], 0, buf[2]);
    }
    return make_printf(k, 0, fmt);
   }
   var printers = [0, 0];
   function field(x, i$1){
    var f = x[1 + i$1];
    if(! (1 - (typeof f === "number" ? 1 : 0)))
     return caml_call1(sprintf(_bq_), f);
    if(caml_obj_tag(f) === 252) return caml_call1(sprintf(_bo_), f);
    if(caml_obj_tag(f) !== 253) return _bp_;
    var
     s = caml_format_float("%.12g", f),
     l = caml_ml_string_length(s),
     i = 0;
    for(;;){
     if(l <= i) return symbol(s, _d_);
     var match = caml_string_get(s, i), switch$0 = 0;
     if(48 <= match){
      if(58 > match) switch$0 = 1;
     }
     else if(45 === match) switch$0 = 1;
     if(! switch$0) return s;
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return _br_;
    var _e7_ = other_fields(x, i + 1 | 0), _e8_ = field(x, i);
    return caml_call2(sprintf(_bs_), _e8_, _e7_);
   }
   function to_string(e){
    var param = caml_atomic_load(printers);
    for(;;){
     if(param){
      var tl = param[2], hd = param[1], switch$0 = 0;
      try{var val = caml_call1(hd, e);}catch(_e6_){switch$0 = 1;}
      var switch$1 = 0;
      if(switch$0 || ! val)
       switch$1 = 1;
      else
       var s = val[1], match$4 = [0, s];
      if(switch$1){var param = tl; continue;}
     }
     else
      var match$4 = 0;
     if(match$4){var s$0 = match$4[1]; return s$0;}
     if(e === Out_of_memory) return _bx_;
     if(e === Stack_overflow) return _by_;
     if(e[1] === Match_failure){
      var
       match$1 = e[2],
       char$0 = match$1[3],
       line = match$1[2],
       file = match$1[1];
      return caml_call5
              (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _bz_);
     }
     if(e[1] === Assert_failure){
      var
       match$2 = e[2],
       char$1 = match$2[3],
       line$0 = match$2[2],
       file$0 = match$2[1];
      return caml_call5
              (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _bA_);
     }
     if(e[1] === Undefined_recursive_module){
      var
       match$3 = e[2],
       char$2 = match$3[3],
       line$1 = match$3[2],
       file$1 = match$3[1];
      return caml_call5
              (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _bB_);
     }
     if(0 === caml_obj_tag(e)){
      var constructor = e[1][1], match = e.length - 1;
      if(2 < match >>> 0)
       var
        _e2_ = other_fields(e, 2),
        _e3_ = field(e, 1),
        _e5_ = caml_call2(sprintf(_bt_), _e3_, _e2_);
      else
       switch(match){
         case 0:
          var _e5_ = _bu_; break;
         case 1:
          var _e5_ = _bv_; break;
         default:
          var _e4_ = field(e, 1), _e5_ = caml_call1(sprintf(_bw_), _e4_);
       }
      var match$0 = [0, constructor, [0, _e5_]];
     }
     else
      var match$0 = [0, e[1], 0];
     var fields_opt = match$0[2], constructor$0 = match$0[1];
     if(! fields_opt) return constructor$0;
     var f = fields_opt[1];
     return symbol(constructor$0, f);
    }
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var
     a = caml_convert_raw_backtrace(raw_backtrace),
     _e0_ = a.length - 1 - 1 | 0,
     _eZ_ = 0;
    if(_e0_ >= 0){
     var pos = _eZ_;
     for(;;){
      var
       slot = caml_check_bound(a, pos)[1 + pos],
       info$0 =
         function(pos){
          function info(is_raise){
           return is_raise ? 0 === pos ? _bC_ : _bD_ : 0 === pos ? _bE_ : _bF_;
          }
          return info;
         },
       info = info$0(pos);
      if(0 === slot[0])
       var
        _eR_ = slot[5],
        _eS_ = slot[4],
        _eT_ = slot[3],
        _eU_ = slot[6] ? _bG_ : _bI_,
        _eV_ = slot[2],
        _eW_ = slot[7],
        _eX_ = info(slot[1]),
        match =
          [0,
           caml_call7(sprintf(_bH_), _eX_, _eW_, _eV_, _eU_, _eT_, _eS_, _eR_)];
      else if(slot[1])
       var match = 0;
      else
       var _eY_ = info(0), match = [0, caml_call1(sprintf(_bJ_), _eY_)];
      if(match){var str = match[1]; caml_call1(fprintf(outchan, _bK_), str);}
      var _e1_ = pos + 1 | 0;
      if(_e0_ !== pos){var pos = _e1_; continue;}
      break;
     }
    }
    return 0;
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = caml_atomic_load(printers),
      new_printers = [0, fn, old_printers],
      success = caml_atomic_cas(printers, old_printers, new_printers),
      _eQ_ = 1 - success;
     if(_eQ_) continue;
     return _eQ_;
    }
   }
   var errors = _bL_.slice(), empty_backtrace = [0];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use
          ? empty_backtrace
          : caml_get_exception_raw_backtrace(0);
      try{do_at_exit(0);}catch(_eP_){}
      try{
       var _eF_ = to_string(exn$0);
       caml_call1(eprintf(_bM_), _eF_);
       print_raw_backtrace(stderr, raw_backtrace);
       var status = caml_ml_debug_info_status(0);
       if(status < 0){
        var _eG_ = abs(status);
        prerr_endline(caml_check_bound(errors, _eG_)[1 + _eG_]);
       }
       var _eH_ = caml_ml_flush(stderr), _eL_ = _eH_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtrace(0),
        _eJ_ = to_string(exn$0);
       caml_call1(eprintf(_bO_), _eJ_);
       print_raw_backtrace(stderr, raw_backtrace);
       var _eK_ = to_string(exn);
       caml_call1(eprintf(_bP_), _eK_);
       print_raw_backtrace(stderr, raw_backtrace$0);
       var _eL_ = caml_ml_flush(stderr);
      }
      var _eM_ = _eL_;
     }
     catch(_eO_){
      var _eI_ = caml_wrap_exception(_eO_);
      if(_eI_ !== Out_of_memory) throw caml_maybe_attach_backtrace(_eI_, 0);
      var _eM_ = prerr_endline(_bN_);
     }
     return _eM_;
    }
    catch(_eN_){return 0;}
   }
   caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var Finally_raised = [248, _bQ_, caml_fresh_oo_id(0)];
   register_printer
    (function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2];
      return [0, symbol(_bR_, to_string(exn))];
     });
   function read_upto(ic, buf, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 !== len$0){
      var switch$0 = 0;
      if
       (0 <= ofs$0
        && 0 <= len$0 && (caml_ml_bytes_length(buf) - len$0 | 0) >= ofs$0){var r = caml_ml_input(ic, buf, ofs$0, len$0); switch$0 = 1;}
      if(! switch$0) var r = invalid_arg(_e_);
      if(0 !== r){
       var
        len$1 = len$0 - r | 0,
        ofs$1 = ofs$0 + r | 0,
        ofs$0 = ofs$1,
        len$0 = len$1;
       continue;
      }
     }
     return ofs$0 - ofs | 0;
    }
   }
   function ensure(buf, ofs, n){
    var len = caml_ml_bytes_length(buf);
    if((ofs + n | 0) <= len) return buf;
    var new_len = [0, len];
    for(;;){
     if(new_len[1] < (ofs + n | 0)){
      new_len[1] = (2 * new_len[1] | 0) + 1 | 0;
      continue;
     }
     var
      new_len$0 = new_len[1],
      new_len$1 =
        new_len$0 <= max_string_length
         ? new_len$0
         : ofs < max_string_length ? max_string_length : failwith(_bS_),
      new_buf = caml_create_bytes(new_len$1);
     blit(buf, 0, new_buf, 0, ofs);
     return new_buf;
    }
   }
   function string_of_tok(param){
    switch(param[0]){
      case 0:
       var match = param[1];
       switch(match[0]){
         case 0:
          var i = match[1]; return "" + i;
         case 1:
          var s = match[1]; return s;
         default: var b = match[1]; return string_of_bool(b);
       }
      case 1:
       var w = param[1]; return w;
      case 2:
       var
        q = param[1],
        _eD_ = rev_map(string_of_tok, q),
        s$1 =
          fold_left$0
           (function(acc, x){return symbol(acc, symbol(_bU_, x));},
            _bT_,
            _eD_);
       return symbol(s$1, _bV_);
      case 3:
       var ts = param[3], n = param[1], _eE_ = rev_map(string_of_tok, ts);
       return symbol
               (n,
                fold_left$0
                 (function(acc, x){return symbol(acc, symbol(_bX_, x));},
                  _bW_,
                  _eE_));
      case 4:
       var s$0 = param[2], sl = param[1];
       return concat(_bY_, symbol$0(sl, [0, s$0, 0]));
      default: var c = param[1]; return c;
    }
   }
   var
    Parse_err = [248, _bZ_, caml_fresh_oo_id(0)],
    Eval_err = [248, _b0_, caml_fresh_oo_id(0)];
   function create(name){return [0, name, 0, 0, _b1_, 0];}
   function add(param, def){
    var
     i = param[5],
     out = param[4],
     modls = param[3],
     lst = param[2],
     name = param[1];
    return [0, name, [0, def, lst], modls, out, i];
   }
   function find_modl(param$0, modl_name){
    var modls = param$0[3], param = modls;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Not_found, 1);
     var l = param[2], x = param[1], name = x[1];
     if(caml_string_equal(name, modl_name)) return x;
     var param = l;
    }
   }
   function incl(param){
    var
     i = param[5],
     out = param[4],
     modls = param[3],
     lst = param[2],
     name = param[1];
    return [0, name, lst, modls, out, i + 1 | 0];
   }
   function eval_err(param, s){
    var i = param[5];
    throw caml_maybe_attach_backtrace([0, Eval_err, s, i], 1);
   }
   function parse_err(param, s){
    var i = param[5];
    throw caml_maybe_attach_backtrace([0, Parse_err, s, i], 1);
   }
   var stack = [0, 0, 0];
   function push(x){
    stack[1] = [0, x, stack[1]];
    stack[2] = stack[2] + 1 | 0;
    return 0;
   }
   function pop(modl, n){
    var match = stack[1];
    if(match){
     var tl = match[2], hd = match[1];
     stack[1] = tl;
     stack[2] = stack[2] - 1 | 0;
     var match$0 = [0, hd];
    }
    else
     var match$0 = 0;
    if(! match$0) return eval_err(modl, symbol(_b3_, symbol(n, _b2_)));
    var v = match$0[1];
    return v;
   }
   function top(modl, n){
    var match = stack[1];
    if(match) var hd = match[1], match$0 = [0, hd]; else var match$0 = 0;
    if(! match$0) return eval_err(modl, symbol(_b5_, symbol(n, _b4_)));
    var v = match$0[1];
    return v;
   }
   function err(a, modl, s){push(a); return eval_err(modl, s);}
   function match_bool(f, modl, name){
    var a = pop(modl, name);
    if(0 === a[0]){
     var match = a[1];
     if(2 === match[0]){var b = match[1]; return caml_call1(f, b);}
    }
    return err(a, modl, symbol(_b7_, symbol(name, _b6_)));
   }
   function match_int(f, modl, name){
    var a = pop(modl, name);
    if(0 === a[0]){
     var match = a[1];
     if(0 === match[0]){var x = match[1]; return caml_call1(f, x);}
    }
    return err(a, modl, symbol(_b9_, symbol(name, _b8_)));
   }
   function match_str(f, modl, name){
    var a = pop(modl, name);
    if(0 === a[0]){
     var match = a[1];
     if(1 === match[0]){var s = match[1]; return caml_call1(f, s);}
    }
    return err(a, modl, symbol(_b$_, symbol(name, _b__)));
   }
   function match_quote(f, modl, name){
    var a = pop(modl, name);
    if(2 !== a[0]) return err(a, modl, symbol(_cb_, symbol(name, _ca_)));
    var q = a[1];
    return caml_call1(f, q);
   }
   function match_real_quote(f, modl, name){
    var a = pop(modl, name);
    if(2 !== a[0]) return err(a, modl, symbol(_cd_, symbol(name, _cc_)));
    var q = a[1];
    return q
            ? caml_call1(f, q)
            : eval_err(modl, symbol(_cf_, symbol(name, _ce_)));
   }
   function bop(f, modl, name){
    return match_bool
            (function(y){
              return match_bool
                      (function(x){return push([0, [2, caml_call2(f, x, y)]]);},
                       modl,
                       name);
             },
             modl,
             name);
   }
   function iop(f, modl, name){
    return match_int
            (function(y){
              return match_int
                      (function(x){return push([0, [0, caml_call2(f, x, y)]]);},
                       modl,
                       name);
             },
             modl,
             name);
   }
   function isop_bool(f, g, modl, name){
    var a = pop(modl, name);
    if(0 === a[0]){
     var match = a[1];
     switch(match[0]){
       case 0:
        var y = match[1];
        return match_int
                (function(x){return push([0, [2, caml_call2(f, x, y)]]);},
                 modl,
                 name);
       case 1:
        var d = match[1];
        return match_str
                (function(s){return push([0, [2, caml_call2(g, s, d)]]);},
                 modl,
                 name);
     }
    }
    return err(a, modl, symbol(_cj_, symbol(name, _ci_)));
   }
   function isbqop_bool(f, g, h, j, modl, name){
    var a = pop(modl, name);
    switch(a[0]){
      case 0:
       var match = a[1];
       switch(match[0]){
         case 0:
          var y = match[1];
          return match_int
                  (function(x){return push([0, [2, caml_call2(f, x, y)]]);},
                   modl,
                   name);
         case 1:
          var d = match[1];
          return match_str
                  (function(s){return push([0, [2, caml_call2(g, s, d)]]);},
                   modl,
                   name);
         default:
          var n = match[1];
          return match_bool
                  (function(b){return push([0, [2, caml_call2(h, b, n)]]);},
                   modl,
                   name);
       }
      case 2:
       var q = a[1];
       return match_quote
               (function(p){return push([0, [2, caml_call2(j, p, q)]]);},
                modl,
                name);
      default: return err(a, modl, symbol(_cl_, symbol(name, _ck_)));
    }
   }
   function pow(a, n){
    if(0 === n) return 1;
    if(1 === n) return a;
    var b = pow(a, n / 2 | 0), _eC_ = 0 === (n % 2 | 0) ? 1 : a;
    return caml_mul(caml_mul(b, b), _eC_);
   }
   function uncurry3(f, param){
    var c = param[3], b = param[2], a = param[1];
    return caml_call3(f, a, b, c);
   }
   function map_a(f, param){
    var c = param[3], b = param[2], a = param[1];
    return [0, caml_call1(f, a), b, c];
   }
   function prep_a(param, d){
    var c = param[3], b = param[2], a = param[1];
    return [0, [0, d, function(param){return a;}], b, c];
   }
   function wrd(modl, cs){
    function inn(modl, cs$0){
     if(! cs$0) return [0, 0, modl, cs$0];
     var d = cs$0[1];
     if(10 === d){
      var cs$1 = cs$0[2], _eB_ = caml_call1(cs$1, 0);
      return [0, 0, incl(modl), _eB_];
     }
     if(32 === d){
      var cs$2 = cs$0[2];
      return [0, 0, modl, caml_call1(cs$2, 0)];
     }
     if(58 === d){
      var cs$3 = cs$0[2];
      return prep_a(inn(modl, caml_call1(cs$3, 0)), 0);
     }
     var
      cs$4 = cs$0[2],
      param = inn(modl, caml_call1(cs$4, 0)),
      c = param[3],
      b = param[2],
      a = param[1];
     if(a)
      var
       cs = a[2],
       c$0 = a[1],
       _eA_ = [0, [0, d, function(param){return c$0;}], cs];
     else
      var _eA_ = [0, [0, d, empty], empty];
     return [0, _eA_, b, c];
    }
    var _ex_ = inn(modl, cs);
    return map_a
            (function(cs){
              if(! cs) return parse_err(modl, _cn_);
              var c = cs[1], cs$0 = cs[2];
              if(0 === caml_call1(cs$0, 0))
               return [1, of_seq(function(param){return c;})];
              function _ey_(param){return cs;}
              var
               _ez_ = 0,
               param =
                 fold_left
                  (function(acc, x){
                    return [0, of_seq(function(param){return x;}), acc];
                   },
                   _ez_,
                   _ey_);
              if(! param) return parse_err(modl, _cm_);
              var ws = param[2], w = param[1];
              return [4, ws, w];
             },
             _ex_);
   }
   function int$0(modl, cs){
    function inn(modl, cs){
     if(cs){
      var i = cs[1];
      if(10 === i){
       var cs$0 = cs[2], _ew_ = caml_call1(cs$0, 0);
       return [0, 0, incl(modl), _ew_];
      }
      if(48 <= i){
       if(58 > i){
        var cs$1 = cs[2];
        return prep_a(inn(modl, caml_call1(cs$1, 0)), i);
       }
      }
      else if(32 === i){
       var cs$2 = cs[2];
       return [0, 0, modl, caml_call1(cs$2, 0)];
      }
     }
     return [0, 0, modl, cs];
    }
    var _er_ = inn(modl, cs);
    return map_a
            (function(seq){
              var s = of_seq(function(param){return seq;});
              try{var _et_ = [0, caml_int_of_string(s)], param = _et_;}
              catch(_ev_){
               var _es_ = caml_wrap_exception(_ev_);
               if(_es_[1] !== Failure)
                throw caml_maybe_attach_backtrace(_es_, 0);
               var param = 0;
              }
              if(param)
               var v = param[1], _eu_ = v;
              else
               var _eu_ = parse_err(modl, _co_);
              return [0, [0, _eu_]];
             },
             _er_);
   }
   function tru(modl, cs){
    var _eo_ = to_seq$0(_cp_), _ep_ = take(4, function(param){return cs;});
    if(0 !== compare(function(a, b){return a === b ? 0 : 1;}, _ep_, _eo_))
     return wrd(modl, cs);
    var _eq_ = 0;
    return [0,
            _cq_,
            modl,
            caml_call1(drop(4, function(param){return cs;}), _eq_)];
   }
   function fals(modl, cs){
    var _el_ = to_seq$0(_cr_), _em_ = take(5, function(param){return cs;});
    if(0 !== compare(function(a, b){return a === b ? 0 : 1;}, _em_, _el_))
     return wrd(modl, cs);
    var _en_ = 0;
    return [0,
            _cs_,
            modl,
            caml_call1(drop(5, function(param){return cs;}), _en_)];
   }
   function comm(modl, cs){
    function inn(acc, modl, param){
     var acc$0 = acc, modl$0 = modl, param$0 = param;
     for(;;){
      if(! param$0) return parse_err(modl$0, _ct_);
      var c = param$0[1], switcher = c - 40 | 0;
      if(1 < switcher >>> 0){
       if(-30 === switcher){
        var
         cs = param$0[2],
         param$1 = caml_call1(cs, 0),
         modl$1 = incl(modl$0),
         modl$0 = modl$1,
         param$0 = param$1;
        continue;
       }
       var
        cs$0 = param$0[2],
        acc$1 = [0, c, acc$0],
        acc$0 = acc$1,
        param$0 = caml_call1(cs$0, 0);
       continue;
      }
      if(switcher){
       var cs$1 = param$0[2], _ek_ = caml_call1(cs$1, 0);
       return [0, rev(acc$0), modl$0, _ek_];
      }
      var cs$2 = param$0[2];
      return uncurry3(inn, inn(acc$0, modl$0, caml_call1(cs$2, 0)));
     }
    }
    var _ej_ = inn(0, modl, caml_call1(cs, 0));
    return map_a(function(seq){return [5, of_seq(to_seq(seq))];}, _ej_);
   }
   function str(modl, cs){
    var acc = 0, modl$0 = modl, param = caml_call1(cs, 0);
    for(;;){
     if(param){
      var c = param[1];
      if(10 === c){
       var
        cs$0 = param[2],
        param$0 = caml_call1(cs$0, 0),
        modl$1 = incl(modl$0),
        modl$0 = modl$1,
        param = param$0;
       continue;
      }
      if(34 !== c){
       if(92 !== c){
        var
         cs$4 = param[2],
         acc$2 = [0, c, acc],
         acc = acc$2,
         param = caml_call1(cs$4, 0);
        continue;
       }
       var cs$2 = param[2], match = caml_call1(cs$2, 0);
       if(match && 34 === match[1]){
        var
         cs$3 = match[2],
         acc$0 = [0, 34, acc],
         acc = acc$0,
         param = caml_call1(cs$3, 0);
        continue;
       }
       var acc$1 = [0, 92, acc], acc = acc$1, param = caml_call1(cs$2, 0);
       continue;
      }
      var
       cs$1 = param[2],
       _eh_ = caml_call1(cs$1, 0),
       _ei_ = [0, rev(acc), modl$0, _eh_];
     }
     else
      var _ei_ = parse_err(modl$0, _cu_);
     return map_a(function(seq){return [0, [1, of_seq(to_seq(seq))]];}, _ei_);
    }
   }
   function build(ch, f, modl, cs){
    function inn(acc, modl){
     function stream(f, acc, cs){
      var
       param = caml_call2(f, modl, cs),
       cs$0 = param[3],
       modl$0 = param[2],
       tok = param[1];
      return uncurry3(inn, [0, [0, tok, acc], modl$0, cs$0]);
     }
     return function(cs){
      if(! cs)
       return parse_err(modl, symbol(_cx_, symbol(make$0(1, ch), _cw_)));
      var c = cs[1], cs$0 = cs[2];
      if(c === ch){
       var _d7_ = caml_call1(cs$0, 0);
       return [0, rev(acc), modl, _d7_];
      }
      if(59 <= c){
       if(91 === c){
        var cs$1 = cs[2], _d8_ = function(lst){return [2, lst];}, _d9_ = 93;
        return stream
                (function(_ec_, _ed_){return build(_d9_, _d8_, _ec_, _ed_);},
                 acc,
                 cs$1);
       }
       if(102 === c) return stream(fals, acc, cs);
       if(116 === c) return stream(tru, acc, cs);
      }
      else if(32 <= c){
       if(48 <= c){
        if(58 > c) return stream(int$0, acc, cs);
        var
         cs$2 = cs[2],
         _d__ =
           function(param){
            if(! param) return parse_err(modl, _cv_);
            var lst = param[2], t = param[1], _eg_ = rev(lst);
            return [3, string_of_tok(t), 0, _eg_];
           },
         _d$_ = 59;
        return stream
                (function(_ee_, _ef_){return build(_d$_, _d__, _ee_, _ef_);},
                 acc,
                 cs$2);
       }
       if(41 > c)
        switch(c - 32 | 0){
          case 0:
           var cs$3 = cs[2], _ea_ = caml_call1(cs$3, 0);
           return inn(acc, modl)(_ea_);
          case 2:
           var cs$4 = cs[2]; return stream(str, acc, cs$4);
          case 8:
           var cs$5 = cs[2]; return stream(comm, acc, cs$5);
        }
      }
      else if(10 === c){
       var cs$6 = cs[2], _eb_ = caml_call1(cs$6, 0);
       return inn(acc, incl(modl))(_eb_);
      }
      return stream(wrd, acc, cs);};
    }
    var _d6_ = caml_call1(cs, 0);
    return map_a(f, inn(0, modl)(_d6_));
   }
   function parse(modl){
    function stream(f, cs){
     var
      param = caml_call2(f, modl, cs),
      cs$0 = param[3],
      modl$0 = param[2],
      tok = param[1],
      a = eval$0(modl$0)(tok);
     return parse(a)(cs$0);
    }
    return function(cs){
     if(! cs) return modl;
     var _dU_ = cs[1];
     if(59 <= _dU_){
      if(91 === _dU_){
       var cs$0 = cs[2], _dV_ = function(lst){return [2, lst];}, _dW_ = 93;
       return stream
               (function(_d1_, _d2_){return build(_dW_, _dV_, _d1_, _d2_);},
                cs$0);
      }
      if(102 === _dU_) return stream(fals, cs);
      if(116 === _dU_) return stream(tru, cs);
     }
     else if(32 <= _dU_){
      if(48 <= _dU_){
       if(58 > _dU_) return stream(int$0, cs);
       var
        cs$1 = cs[2],
        _dX_ =
          function(param){
           if(! param) return parse_err(modl, _cy_);
           var lst = param[2], t = param[1], _d5_ = rev(lst);
           return [3, string_of_tok(t), 0, _d5_];
          },
        _dY_ = 59;
       return stream
               (function(_d3_, _d4_){return build(_dY_, _dX_, _d3_, _d4_);},
                cs$1);
      }
      if(41 > _dU_)
       switch(_dU_ - 32 | 0){
         case 0:
          var cs$2 = cs[2], _dZ_ = caml_call1(cs$2, 0);
          return parse(modl)(_dZ_);
         case 2:
          var cs$3 = cs[2]; return stream(str, cs$3);
         case 8:
          var cs$4 = cs[2]; return stream(comm, cs$4);
       }
     }
     else if(10 === _dU_){
      var cs$5 = cs[2], _d0_ = caml_call1(cs$5, 0);
      return parse(incl(modl))(_d0_);
     }
     return stream(wrd, cs);};
   }
   function eval$0(modl){
    function slide(f){return modl;}
    function eval_list(modl){
     return function(_dT_){return fold_left$0(eval$0, modl, _dT_);};
    }
    function stl(param){
     if(param){
      var x = param[1];
      if(param[2]){var xs = param[2]; return [0, x, stl(xs)];}
     }
     return 0;
    }
    return function(x){
     switch(x[0]){
       case 0:
        return slide(push(x));
       case 1:
        var def_name = x[1], lst$0 = modl[2], param$0 = lst$0;
        for(;;){
         if(param$0){
          var
           l$0 = param$0[2],
           a$0 = param$0[1][1],
           _da_ = 0 === caml_compare(a$0, def_name) ? 1 : 0;
          if(! _da_){var param$0 = l$0; continue;}
          var _db_ = _da_;
         }
         else
          var _db_ = 0;
         if(_db_){
          var lst = modl[2], param = lst;
          for(;;){
           if(! param) throw caml_maybe_attach_backtrace(Not_found, 1);
           var l = param[2], match = param[1], b = match[2], a = match[1];
           if(0 === caml_compare(a, def_name)){
            var
             print = eval_list(modl)(b)[4],
             i$0 = modl[5],
             modls$0 = modl[3],
             lst$2 = modl[2],
             name$0 = modl[1];
            return [0, name$0, lst$2, modls$0, print, i$0 + 1 | 0];
           }
           var param = l;
          }
         }
         var switch$0 = caml_string_compare(def_name, "eval");
         if(0 <= switch$0){
          if(0 >= switch$0)
           return match_str
                   (function(s){
                     var _dx_ = to_seq$0(s)(0);
                     return parse(modl)(_dx_);
                    },
                    modl,
                    def_name);
          var switch$1 = caml_string_compare(def_name, "pop");
          if(0 <= switch$1){
           if(0 >= switch$1){pop(modl, def_name); return slide(0);}
           if(! caml_string_notequal(def_name, "quote"))
            return slide(push([2, [0, pop(modl, def_name), 0]]));
           if(! caml_string_notequal(def_name, "rot")){
            var
             a$3 = pop(modl, def_name),
             b$1 = pop(modl, def_name),
             c = pop(modl, def_name);
            push(b$1);
            push(a$3);
            return slide(push(c));
           }
           if(! caml_string_notequal(def_name, "shd"))
            return match_real_quote
                    (function(q){
                      var _ds_ = hd(rev(q));
                      return eval$0(modl)(_ds_);
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "stl"))
            return match_real_quote
                    (function(q){
                      var _dr_ = [2, stl(q)];
                      return eval$0(modl)(_dr_);
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "swap")){
            var a$2 = pop(modl, def_name), b$0 = pop(modl, def_name);
            push(a$2);
            return slide(push(b$0));
           }
           if(! caml_string_notequal(def_name, cst_tl))
            return match_real_quote
                    (function(q){
                      if(q) var l = q[2], _dq_ = l; else var _dq_ = failwith(_o_);
                      return eval$0(modl)([2, _dq_]);
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "use"))
            return match_str
                    (function(s){
                      var
                       modl$0 = eval_file(s),
                       i = modl[5],
                       out = modl[4],
                       modls = modl[3],
                       lst = modl[2],
                       name = modl[1];
                      return [0, name, lst, [0, modl$0, modls], out, i];
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "useup"))
            return match_str
                    (function(s){
                      var
                       _dp_ = eval_file(s),
                       j = _dp_[5],
                       modout = _dp_[4],
                       modls_b = _dp_[3],
                       lst_b = _dp_[2],
                       i = modl[5],
                       out = modl[4],
                       modls_a = modl[3],
                       lst_a = modl[2],
                       name_a = modl[1],
                       _dn_ = symbol(modout, out),
                       _do_ = symbol$0(modls_b, modls_a);
                      return [0,
                              name_a,
                              symbol$0(lst_b, lst_a),
                              _do_,
                              _dn_,
                              i + j | 0];
                     },
                     modl,
                     def_name);
          }
          else{
           if(! caml_string_notequal(def_name, "exit"))
            throw caml_maybe_attach_backtrace(Exit, 1);
           if(! caml_string_notequal(def_name, cst_hd))
            return match_real_quote
                    (function(q){var _dw_ = hd(q); return eval$0(modl)(_dw_);},
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "if"))
            return match_quote
                    (function(f){
                      return match_quote
                              (function(t){
                                return match_bool
                                        (function(b){
                                          return b ? eval_list(modl)(t) : eval_list(modl)(f);
                                         },
                                         modl,
                                         def_name);
                               },
                               modl,
                               def_name);
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "len"))
            return slide(push([0, [0, stack[2]]]));
           if(! caml_string_notequal(def_name, "not"))
            return slide
                    (match_bool
                      (function(x){return push([0, [2, 1 - x]]);}, modl, def_name));
           if(! caml_string_notequal(def_name, "open"))
            return match_quote(eval_list(modl), modl, def_name);
           if(! caml_string_notequal(def_name, "or"))
            return slide
                    (bop
                      (function(_du_, _dt_){var _dv_ = _du_ || _dt_; return _dv_;},
                       modl,
                       def_name));
           if(! caml_string_notequal(def_name, "over")){
            var a$4 = pop(modl, def_name), b$2 = top(modl, def_name);
            push(a$4);
            return slide(push(b$2));
           }
          }
         }
         else{
          var switch$2 = caml_string_compare(def_name, "<");
          if(0 <= switch$2){
           if(0 >= switch$2){
            var
             _dj_ =
               function(x, y){
                return -1 === caml_string_compare(x, y) ? 1 : 0;
               };
            return slide
                    (isop_bool
                      (function(_dQ_, _dP_){return _dQ_ < _dP_ ? 1 : 0;},
                       _dj_,
                       modl,
                       def_name));
           }
           if(! caml_string_notequal(def_name, "<>")){
            var
             _dg_ =
               function(x, y){
                return 0 !== compare$0(caml_compare, x, y) ? 1 : 0;
               },
             _dh_ = function(_dO_, _dN_){return _dO_ !== _dN_ ? 1 : 0;},
             _di_ = function(x, y){return 1 - caml_string_equal(x, y);};
            return slide
                    (isbqop_bool
                      (function(_dM_, _dL_){return _dM_ !== _dL_ ? 1 : 0;},
                       _di_,
                       _dh_,
                       _dg_,
                       modl,
                       def_name));
           }
           if(! caml_string_notequal(def_name, "=")){
            var
             _dd_ =
               function(x, y){
                return 0 === compare$0(caml_compare, x, y) ? 1 : 0;
               },
             _de_ = function(_dK_, _dJ_){return _dK_ === _dJ_ ? 1 : 0;},
             _df_ = caml_string_equal;
            return slide
                    (isbqop_bool
                      (function(_dI_, _dH_){return _dI_ === _dH_ ? 1 : 0;},
                       _df_,
                       _de_,
                       _dd_,
                       modl,
                       def_name));
           }
           if(! caml_string_notequal(def_name, ">")){
            var
             _dc_ =
               function(x, y){return 1 === caml_string_compare(x, y) ? 1 : 0;};
            return slide
                    (isop_bool
                      (function(_dG_, _dF_){return _dF_ < _dG_ ? 1 : 0;},
                       _dc_,
                       modl,
                       def_name));
           }
           if(! caml_string_notequal(def_name, "and"))
            return slide
                    (bop
                      (function(_dD_, _dC_){
                        var _dE_ = _dD_ ? _dC_ : _dD_;
                        return _dE_;
                       },
                       modl,
                       def_name));
           if(! caml_string_notequal(def_name, "chars"))
            return match_str
                    (function(s){
                      var _dy_ = to_seq$0(s);
                      function _dz_(c){return [0, [1, make$0(1, c)]];}
                      function seq(_dB_){return map(_dz_, _dy_, _dB_);}
                      function direct(depth, seq){
                       if(0 === depth){
                        var _dA_ = 0;
                        return rev
                                (fold_left(function(acc, x){return [0, x, acc];}, _dA_, seq));
                       }
                       var match = caml_call1(seq, 0);
                       if(! match) return 0;
                       var next = match[2], x = match[1];
                       return [0, x, direct(depth - 1 | 0, next)];
                      }
                      var x = direct(500, seq);
                      return slide(push([2, x]));
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, cst_concat))
            return match_quote
                    (function(q){
                      var
                       s =
                         concat
                          (_cC_,
                           map$0
                            (function(param){
                              if(0 === param[0]){
                               var match = param[1];
                               if(1 === match[0]){var s = match[1]; return s;}
                              }
                              return eval_err(modl, _cB_);
                             },
                             q));
                      return slide(push([0, [1, s]]));
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "del"))
            return match_str
                    (function(def_name){
                      var
                       i = modl[5],
                       out = modl[4],
                       modls = modl[3],
                       lst = modl[2],
                       name = modl[1];
                      return [0, name, remove_assoc(def_name, lst), modls, out, i];
                     },
                     modl,
                     def_name);
           if(! caml_string_notequal(def_name, "dup"))
            return slide(push(top(modl, def_name)));
          }
          else{
           if(! caml_string_notequal(def_name, "%"))
            return slide(iop(caml_mod, modl, def_name));
           if(! caml_string_notequal(def_name, "*"))
            return slide(iop(caml_mul, modl, def_name));
           if(! caml_string_notequal(def_name, "**"))
            return slide(iop(pow, modl, def_name));
           if(! caml_string_notequal(def_name, "+")){
            var a$1 = pop(modl, def_name), switch$3 = 0;
            switch(a$1[0]){
              case 0:
               var match$0 = a$1[1];
               switch(match$0[0]){
                 case 0:
                  var
                   y = match$0[1],
                   _dk_ =
                     match_int
                      (function(x){return push([0, [0, x + y | 0]]);},
                       modl,
                       def_name);
                  break;
                 case 1:
                  var
                   d = match$0[1],
                   _dk_ =
                     match_str
                      (function(s){return push([0, [1, symbol(s, d)]]);},
                       modl,
                       def_name);
                  break;
                 default: switch$3 = 1;
               }
               break;
              case 2:
               var
                q = a$1[1],
                _dk_ =
                  match_quote
                   (function(e){return push([2, symbol$0(e, q)]);},
                    modl,
                    def_name);
               break;
              default: switch$3 = 1;
            }
            if(switch$3)
             var _dk_ = err(a$1, modl, symbol(_ch_, symbol(def_name, _cg_)));
            return slide(_dk_);
           }
           if(! caml_string_notequal(def_name, "+quote"))
            return slide
                    (match_quote
                      (function(q){return push([2, [0, pop(modl, def_name), q]]);},
                       modl,
                       def_name));
           if(! caml_string_notequal(def_name, ",")){
            caml_ml_flush(stdout);
            var
             build_result =
               function(buf, pos, param){
                var pos$0 = pos, param$0 = param;
                for(;;){
                 if(! param$0) return buf;
                 var
                  tl = param$0[2],
                  hd = param$0[1],
                  len = caml_ml_bytes_length(hd);
                 caml_blit_bytes(hd, 0, buf, pos$0 - len | 0, len);
                 var pos$1 = pos$0 - len | 0, pos$0 = pos$1, param$0 = tl;
                }
               },
             accu = 0,
             len = 0;
            for(;;){
             var n = caml_ml_input_scan_line(stdin);
             if(0 === n){
              if(! accu) throw caml_maybe_attach_backtrace(End_of_file, 1);
              var _c$_ = build_result(caml_create_bytes(len), len, accu);
             }
             else{
              if(0 >= n){
               var beg = caml_create_bytes(- n | 0);
               caml_ml_input(stdin, beg, 0, - n | 0);
               var
                len$1 = len - n | 0,
                accu$0 = [0, beg, accu],
                accu = accu$0,
                len = len$1;
               continue;
              }
              var res = caml_create_bytes(n - 1 | 0);
              caml_ml_input(stdin, res, 0, n - 1 | 0);
              caml_ml_input_char(stdin);
              if(accu)
               var
                len$0 = (len + n | 0) - 1 | 0,
                _c$_ =
                  build_result
                   (caml_create_bytes(len$0), len$0, [0, res, accu]);
              else
               var _c$_ = res;
             }
             return slide(push([0, [1, caml_string_of_bytes(_c$_)]]));
            }
           }
           if(! caml_string_notequal(def_name, "-"))
            return slide
                    (iop
                      (function(_dS_, _dR_){return _dS_ - _dR_ | 0;},
                       modl,
                       def_name));
           if(! caml_string_notequal(def_name, cst)){
            var
             print$0 = symbol(string_of_tok(pop(modl, def_name)), _cD_),
             i = modl[5],
             out = modl[4],
             modls = modl[3],
             lst$1 = modl[2],
             name = modl[1];
            return [0, name, lst$1, modls, symbol(out, print$0), i + 1 | 0];
           }
           if(! caml_string_notequal(def_name, "/"))
            return slide(iop(caml_div, modl, def_name));
          }
         }
         return eval_err(modl, symbol(_cA_, symbol(def_name, _cz_)));
        }
       case 2:
        return slide(push(x));
       case 3:
        var n$0 = x[1];
        if(x[2]){
         var
          ts = x[3],
          _dl_ = 0,
          ts$0 =
            fold_left$0
             (function(acc, a){
               if(1 === a[0] && ! caml_string_notequal(a[1], cst_take))
                return [0, pop(modl, _cE_), acc];
               return [0, a, acc];
              },
              _dl_,
              ts);
         return add(modl, [0, n$0, ts$0]);
        }
        var
         ts$1 = x[3],
         _dm_ = 0,
         ts$2 =
           fold_left$0
            (function(acc, a){
              if(1 === a[0] && ! caml_string_notequal(a[1], cst_take))
               return [0, pop(modl, _cF_), acc];
              return [0, a, acc];
             },
             _dm_,
             ts$1);
        return add(modl, [0, n$0, ts$2]);
       case 4:
        var s = x[2], sl = x[1], m = fold_left$0(find_modl, modl, rev(sl));
        eval$0(m)([1, s]);
        return modl;
       default: return modl;
     }};
   }
   function eval_file(filename){
    var
     len_s = caml_ml_string_length(filename),
     diff = len_s - 5 | 0,
     _c2_ = 0 <= diff ? 1 : 0;
    if(_c2_){
     var i = 0;
     for(;;){
      if(i === 5)
       var _c7_ = 1;
      else{
       if
        (caml_string_unsafe_get(filename, diff + i | 0)
         === caml_string_unsafe_get(cst_4ish, i)){
        var i$0 = i + 1 | 0, i = i$0;
        continue;
       }
       var _c7_ = 0;
      }
      break;
     }
    }
    else
     var _c7_ = _c2_;
    var
     ic = _c7_ ? open_text(filename) : open_text(symbol(filename, _cG_)),
     chunk_size = 65536;
    try{
     var
      _c5_ = caml_ml_pos_in(ic),
      _c6_ = caml_ml_channel_size(ic) - _c5_ | 0,
      initial_size = _c6_;
    }
    catch(_c__){
     var _c3_ = caml_wrap_exception(_c__);
     if(_c3_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_c3_, 0);
     var initial_size = -1;
    }
    var
     initial_size$0 = 0 <= initial_size ? initial_size : chunk_size,
     initial_size$1 =
       initial_size$0 <= max_string_length
        ? initial_size$0
        : max_string_length,
     buf = caml_create_bytes(initial_size$1),
     nread = read_upto(ic, buf, 0, initial_size$1);
    if(nread < initial_size$1)
     var x = sub_string(buf, 0, nread);
    else{
     var switch$0 = 0;
     try{var c = caml_ml_input_char(ic);}
     catch(_c9_){
      var _c4_ = caml_wrap_exception(_c9_);
      if(_c4_ !== End_of_file) throw caml_maybe_attach_backtrace(_c4_, 0);
      var x = caml_string_of_bytes(buf);
      switch$0 = 1;
     }
     if(! switch$0){
      var buf$2 = ensure(buf, nread, 65537);
      caml_bytes_set(buf$2, nread, c);
      var ofs$1 = nread + 1 | 0, buf$0 = buf$2, ofs = ofs$1;
      for(;;){
       var
        buf$1 = ensure(buf$0, ofs, chunk_size),
        rem = caml_ml_bytes_length(buf$1) - ofs | 0,
        r$0 = read_upto(ic, buf$1, ofs, rem);
       if(r$0 >= rem){
        var ofs$0 = ofs + rem | 0, buf$0 = buf$1, ofs = ofs$0;
        continue;
       }
       var x = sub_string(buf$1, 0, ofs + r$0 | 0);
       break;
      }
     }
    }
    var
     _c8_ = to_seq$0(x)(0),
     s$0 = hd(split_on_char(46, hd(rev(split_on_char(47, filename))))),
     s = caml_bytes_of_string(s$0);
    if(0 === caml_ml_bytes_length(s))
     var _c1_ = s;
    else{
     var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
     caml_blit_bytes(s, 0, r, 0, len);
     caml_bytes_unsafe_set(r, 0, uppercase_ascii(caml_bytes_unsafe_get(s, 0)));
     var _c1_ = r;
    }
    return parse(create(caml_string_of_bytes(_c1_)))(_c8_);
   }
   var
    Error = [248, _cH_, caml_fresh_oo_id(0)],
    exn = [0, Error, [0]],
    slot = caml_obj_tag(exn) === 248 ? exn : exn[1];
   caml_register_named_value("jsError", slot);
   (function(exn){throw exn;});
   var global = globalThis, no_handler = null, undefined$0 = undefined;
   function get(x, f){return x == no_handler ? caml_call1(f, 0) : x;}
   var true$0 = true, false$0 = false;
   global.String;
   global.RegExp;
   global.Object;
   var array_constructor = global.Array;
   global.Date;
   global.Math;
   global.Error;
   global.JSON;
   register_printer
    (function(param){
      if(param[1] !== Error) return 0;
      var e = param[2];
      return [0, caml_string_of_jsstring(e.toString())];
     });
   register_printer
    (function(e){
      return e instanceof array_constructor
              ? 0
              : [0, caml_string_of_jsstring(e.toString())];
     });
   function handler(f){
    return caml_js_wrap_callback_unsafe
            (function(e){
              if(1 - (e == no_handler ? 1 : 0)){
               var res = caml_call1(f, e);
               if(1 - (res | 0)) e.preventDefault();
               return res;
              }
              var t18 = event, res$0 = caml_call1(f, t18);
              if(1 - (res$0 | 0)) t18.returnValue = res$0;
              return res$0;
             });
   }
   function addEventListener(t28, typ, h, capt){
    var capture = [0, capt], passive = 0, once = 0;
    if(t28.addEventListener === undefined$0){
     var
      ev = "on".concat(typ),
      callback =
        function(e){
         var _cY_ = [0, h, e, [0]];
         return function(_cZ_, _c0_){return caml_js_call(_cY_, _cZ_, _c0_);};
        };
     t28.attachEvent(ev, callback);
     return function(param){return t28.detachEvent(ev, callback);};
    }
    var opts = {};
    function iter(t, f){
     if(! t) return 0;
     var b = t[1];
     return caml_call1(f, b);
    }
    iter(capture, function(t37){return opts.capture = t37;});
    iter(once, function(t39){return opts.once = t39;});
    iter(passive, function(t41){return opts.passive = t41;});
    t28.addEventListener(typ, h, opts);
    return function(param){return t28.removeEventListener(typ, h, opts);};
   }
   var
    mousedown = "mousedown",
    keydown = "keydown",
    document = global.document,
    html_element = global.HTMLElement;
   html_element === undefined$0;
   function run(modl, str){
    try{
     if(caml_string_equal(str, cst$0))
      var s$4 = str;
     else{
      var switch$0 = 0;
      if
       (!
        is_space$0(caml_string_unsafe_get(str, 0))
        &&
         !
         is_space$0
          (caml_string_unsafe_get(str, caml_ml_string_length(str) - 1 | 0))){var s$4 = str; switch$0 = 1;}
      if(! switch$0){
       var
        s = caml_bytes_of_string(str),
        len = caml_ml_bytes_length(s),
        i = [0, 0];
       for(;;){
        if(i[1] < len && is_space(caml_bytes_unsafe_get(s, i[1]))){i[1]++; continue;}
        var j = [0, len - 1 | 0];
        for(;;){
         if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1] += -1; continue;}
         var
          _cV_ =
            i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty$0,
          s$4 = caml_string_of_bytes(_cV_);
         break;
        }
        break;
       }
      }
     }
     var
      _cX_ = to_seq$0(s$4)(0),
      param = parse(modl)(_cX_),
      i$0 = param[5],
      out = param[4],
      modls = param[3],
      fns = param[2],
      name = param[1],
      _cW_ = [0, out, [0, name, fns, modls, _cI_, i$0]];
     return _cW_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Eval_err){var s$0 = exn[2]; return [0, s$0, modl];}
     if(exn[1] === Parse_err){var s$1 = exn[2]; return [0, s$1, modl];}
     if(exn[1] === Sys_error){var s$2 = exn[2]; return [0, s$2, modl];}
     if(exn[1] !== Failure)
      return exn === End_of_file
              ? [0, _cJ_, modl]
              : exn
                === Not_found
                ? [0, _cK_, modl]
                : exn
                  === Empty
                  ? [0, _cL_, modl]
                  : exn
                    === Division_by_zero
                    ? [0, _cM_, modl]
                    : exn === Exit ? [0, _cN_, modl] : [0, _cO_, modl];
     var s$3 = exn[2];
     return [0, s$3, modl];
    }
   }
   function onload(param){
    function _cT_(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _cP_], 1);
    }
    var parent = get(document.getElementById("history"), _cT_);
    function _cU_(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _cQ_], 1);
    }
    var interp = get(document.getElementById("interpreter"), _cU_);
    interp.focus();
    var modl = [0, create(_cR_)], m = run(modl[1], std_lib)[2];
    modl[1] = m;
    addEventListener
     (interp,
      keydown,
      handler
       (function(t14){
         var match = t14.keyCode;
         if(13 === match){
          var x = interp.textContent, match$0 = x == no_handler ? 0 : [0, x];
          if(match$0){
           var
            s = match$0[1],
            match$1 = run(modl[1], caml_string_of_jsstring(s)),
            m = match$1[2],
            res = match$1[1];
           modl[1] = m;
           var
            text = "> ".concat(s, caml_jsstring_of_string(symbol(_cS_, res))),
            div = document.createElement("div");
           div.innerHTML = text;
           parent.appendChild(div);
           interp.textContent = cst$0;
          }
          return false$0;
         }
         if(76 === match && t14.ctrlKey | 0){
          parent.textContent = cst$0;
          return false$0;
         }
         return true$0;
        }),
      true$0);
    addEventListener
     (document,
      mousedown,
      handler(function(param){interp.focus(); return false$0;}),
      true$0);
    return false$0;
   }
   var t18 = handler(onload);
   global.onload = t18;
   do_at_exit(0);
   return;
  }
  (globalThis));

//# sourceMappingURL=main.map
